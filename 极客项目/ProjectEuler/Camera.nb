(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    375881,       6725]
NotebookOptionsPosition[    375036,       6691]
NotebookOutlinePosition[    375392,       6707]
CellTagsIndexPosition[    375349,       6704]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"FindDevices", "[", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{7.717, 13.}, {7.717, 12.26}, {7.116999999999999, 
               11.66}, {6.377, 11.66}, {5.637, 11.66}, {5.0360000000000005`, 
               12.26}, {5.0360000000000005`, 13.}, {5.0360000000000005`, 
               13.739999999999998`}, {5.637, 14.34}, {6.377, 14.34}, {
               7.116999999999999, 14.34}, {7.717, 13.739999999999998`}, {
               7.717, 13.}}}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{20.853, 13.}, {20.853, 12.26}, {20.252, 11.66}, {
               19.512, 11.66}, {18.772, 11.66}, {18.172, 12.26}, {18.172, 
               13.}, {18.172, 13.739999999999998`}, {18.772, 14.34}, {19.512, 
               14.34}, {20.252, 14.34}, {20.853, 13.739999999999998`}, {
               20.853, 13.}}}]}, 
             {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               4.1499999999999995`, 18.227999999999998`}, {22.025, 
               18.227999999999998`}, {22.025, 7.3790000000000004`}, {
               4.1499999999999995`, 7.3790000000000004`}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               5.6499999999999995`, 19.191000000000003`}, {9.275, 
               19.191000000000003`}, {9.275, 17.879}, {5.6499999999999995`, 
               17.879}}}]}, 
             {FaceForm[{RGBColor[0.938, 0.961, 0.952], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{17.150000000000002`, 12.803}, {17.150000000000002`, 
               10.559000000000001`}, {15.331, 8.740999999999998}, {13.088, 
               8.740999999999998}, {10.844, 8.740999999999998}, {9.025, 
               10.559000000000001`}, {9.025, 12.803}, {9.025, 
               15.046999999999999`}, {10.844, 16.866}, {13.088, 16.866}, {
               15.331, 16.866}, {17.150000000000002`, 15.046999999999999`}, {
               17.150000000000002`, 12.803}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               18.483999999999998`, 17.316000000000003`}, {21.165, 
               17.316000000000003`}, {21.165, 15.337}, {18.483999999999998`, 
               15.337}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (Integrated Camera)", 
                  "Not connected (Integrated Camera)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{223., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{7.717, 13.}, {7.717, 12.26}, {7.116999999999999, 
               11.66}, {6.377, 11.66}, {5.637, 11.66}, {5.0360000000000005`, 
               12.26}, {5.0360000000000005`, 13.}, {5.0360000000000005`, 
               13.739999999999998`}, {5.637, 14.34}, {6.377, 14.34}, {
               7.116999999999999, 14.34}, {7.717, 13.739999999999998`}, {
               7.717, 13.}}}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{20.853, 13.}, {20.853, 12.26}, {20.252, 11.66}, {
               19.512, 11.66}, {18.772, 11.66}, {18.172, 12.26}, {18.172, 
               13.}, {18.172, 13.739999999999998`}, {18.772, 14.34}, {19.512, 
               14.34}, {20.252, 14.34}, {20.853, 13.739999999999998`}, {
               20.853, 13.}}}]}, 
             {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               4.1499999999999995`, 18.227999999999998`}, {22.025, 
               18.227999999999998`}, {22.025, 7.3790000000000004`}, {
               4.1499999999999995`, 7.3790000000000004`}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               5.6499999999999995`, 19.191000000000003`}, {9.275, 
               19.191000000000003`}, {9.275, 17.879}, {5.6499999999999995`, 
               17.879}}}]}, 
             {FaceForm[{RGBColor[0.938, 0.961, 0.952], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{17.150000000000002`, 12.803}, {17.150000000000002`, 
               10.559000000000001`}, {15.331, 8.740999999999998}, {13.088, 
               8.740999999999998}, {10.844, 8.740999999999998}, {9.025, 
               10.559000000000001`}, {9.025, 12.803}, {9.025, 
               15.046999999999999`}, {10.844, 16.866}, {13.088, 16.866}, {
               15.331, 16.866}, {17.150000000000002`, 15.046999999999999`}, {
               17.150000000000002`, 12.803}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               18.483999999999998`, 17.316000000000003`}, {21.165, 
               17.316000000000003`}, {21.165, 15.337}, {18.483999999999998`, 
               15.337}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (Integrated Camera)", 
                  "Not connected (Integrated Camera)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"Camera", 1}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"Camera", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["2",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (USB2.0 PC CAMERA)", 
                  "Not connected (USB2.0 PC CAMERA)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 2}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{204., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["2",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (USB2.0 PC CAMERA)", 
                  "Not connected (USB2.0 PC CAMERA)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 2}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"Camera", 2}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"Camera", 2}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"FunctionDemo\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected", "Not connected"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"FunctionDemo", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{101., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"FunctionDemo\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected", "Not connected"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"FunctionDemo", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"FunctionDemo", 1}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"FunctionDemo", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"RandomSignalDemo\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected", "Not connected"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"RandomSignalDemo", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{101., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"RandomSignalDemo\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected", "Not connected"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"RandomSignalDemo", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"RandomSignalDemo", 1}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"RandomSignalDemo", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"WriteDemo\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected", "Not connected"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"WriteDemo", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{101., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"WriteDemo\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected", "Not connected"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"WriteDemo", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"WriteDemo", 1}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"WriteDemo", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.713522625403536*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Devices", "[", "\"\<Camera\>\"", "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{7.717, 13.}, {7.717, 12.26}, {7.116999999999999, 
               11.66}, {6.377, 11.66}, {5.637, 11.66}, {5.0360000000000005`, 
               12.26}, {5.0360000000000005`, 13.}, {5.0360000000000005`, 
               13.739999999999998`}, {5.637, 14.34}, {6.377, 14.34}, {
               7.116999999999999, 14.34}, {7.717, 13.739999999999998`}, {
               7.717, 13.}}}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{20.853, 13.}, {20.853, 12.26}, {20.252, 11.66}, {
               19.512, 11.66}, {18.772, 11.66}, {18.172, 12.26}, {18.172, 
               13.}, {18.172, 13.739999999999998`}, {18.772, 14.34}, {19.512, 
               14.34}, {20.252, 14.34}, {20.853, 13.739999999999998`}, {
               20.853, 13.}}}]}, 
             {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               4.1499999999999995`, 18.227999999999998`}, {22.025, 
               18.227999999999998`}, {22.025, 7.3790000000000004`}, {
               4.1499999999999995`, 7.3790000000000004`}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               5.6499999999999995`, 19.191000000000003`}, {9.275, 
               19.191000000000003`}, {9.275, 17.879}, {5.6499999999999995`, 
               17.879}}}]}, 
             {FaceForm[{RGBColor[0.938, 0.961, 0.952], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{17.150000000000002`, 12.803}, {17.150000000000002`, 
               10.559000000000001`}, {15.331, 8.740999999999998}, {13.088, 
               8.740999999999998}, {10.844, 8.740999999999998}, {9.025, 
               10.559000000000001`}, {9.025, 12.803}, {9.025, 
               15.046999999999999`}, {10.844, 16.866}, {13.088, 16.866}, {
               15.331, 16.866}, {17.150000000000002`, 15.046999999999999`}, {
               17.150000000000002`, 12.803}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               18.483999999999998`, 17.316000000000003`}, {21.165, 
               17.316000000000003`}, {21.165, 15.337}, {18.483999999999998`, 
               15.337}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (Integrated Camera)", 
                  "Not connected (Integrated Camera)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{223., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{7.717, 13.}, {7.717, 12.26}, {7.116999999999999, 
               11.66}, {6.377, 11.66}, {5.637, 11.66}, {5.0360000000000005`, 
               12.26}, {5.0360000000000005`, 13.}, {5.0360000000000005`, 
               13.739999999999998`}, {5.637, 14.34}, {6.377, 14.34}, {
               7.116999999999999, 14.34}, {7.717, 13.739999999999998`}, {
               7.717, 13.}}}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{20.853, 13.}, {20.853, 12.26}, {20.252, 11.66}, {
               19.512, 11.66}, {18.772, 11.66}, {18.172, 12.26}, {18.172, 
               13.}, {18.172, 13.739999999999998`}, {18.772, 14.34}, {19.512, 
               14.34}, {20.252, 14.34}, {20.853, 13.739999999999998`}, {
               20.853, 13.}}}]}, 
             {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               4.1499999999999995`, 18.227999999999998`}, {22.025, 
               18.227999999999998`}, {22.025, 7.3790000000000004`}, {
               4.1499999999999995`, 7.3790000000000004`}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               5.6499999999999995`, 19.191000000000003`}, {9.275, 
               19.191000000000003`}, {9.275, 17.879}, {5.6499999999999995`, 
               17.879}}}]}, 
             {FaceForm[{RGBColor[0.938, 0.961, 0.952], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
               3}}}, {{{17.150000000000002`, 12.803}, {17.150000000000002`, 
               10.559000000000001`}, {15.331, 8.740999999999998}, {13.088, 
               8.740999999999998}, {10.844, 8.740999999999998}, {9.025, 
               10.559000000000001`}, {9.025, 12.803}, {9.025, 
               15.046999999999999`}, {10.844, 16.866}, {13.088, 16.866}, {
               15.331, 16.866}, {17.150000000000002`, 15.046999999999999`}, {
               17.150000000000002`, 12.803}}}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               18.483999999999998`, 17.316000000000003`}, {21.165, 
               17.316000000000003`}, {21.165, 15.337}, {18.483999999999998`, 
               15.337}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["1",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (Integrated Camera)", 
                  "Not connected (Integrated Camera)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 1}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"Camera", 1}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"Camera", 1}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["DeviceObject",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False}, 
      PanelBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquarePlusIconMedium"],
              ImageSizeCache->{12., {0., 12.}}],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = True),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["2",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (USB2.0 PC CAMERA)", 
                  "Not connected (USB2.0 PC CAMERA)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 2}], 
                 Devices`DeviceAPI`DeviceDump`ind$$ = 1, 
                 Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                  ImageSizeCache->{204., {5., 10.}}],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->
        GridBox[{
          {
           PaneBox[
            ButtonBox[
             
             DynamicBox[FEPrivate`FrontEndResource[
              "FEBitmaps", "SquareMinusIconMedium"]],
             Appearance->None,
             ButtonFunction:>(Typeset`open$$ = False),
             Evaluator->Automatic,
             Method->"Preemptive"],
            Alignment->{Center, Center},
            
            ImageSize->
             Dynamic[{
              Automatic, 3.5 CurrentValue["FontCapHeight"]/
               AbsoluteCurrentValue[Magnification]}]], 
           GraphicsBox[
            {Thickness[0.038461538461538464`], 
             {FaceForm[{RGBColor[1., 1., 1.], Opacity[1.]}], 
              FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
             {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
              JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1,
                3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {
               25.5, 1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 
               0.5}, {0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {
               1.395, 25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5,
                24.605}, {25.5, 23.5}, {25.5, 2.5}}},
               CurveClosed->{1}]}, 
             {FaceForm[{RGBColor[
              0.45999999999999996`, 0.45999999999999996`, 
               0.45999999999999996`], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               11.020999999999999`, 15.084}, {14.979, 15.084}, {14.979, 
               20.542}, {11.020999999999999`, 20.542}}}]}, 
             {FaceForm[{RGBColor[0.7, 0.7, 0.7], Opacity[1.]}], 
              FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
               15.979000000000001`, 16.541999999999998`}, {
               10.020999999999999`, 16.541999999999998`}, {
               10.020999999999999`, 10.542}, {12.020999999999999`, 10.542}, {
               12.020999999999999`, 0.5}, {13.979000000000001`, 0.5}, {
               13.979000000000001`, 10.542}, {15.979000000000001`, 10.542}, {
               15.979000000000001`, 16.541999999999998`}}}]}},
            AspectRatio->Automatic,
            ImageSize->{Automatic, 
              Dynamic[3.5 CurrentValue["FontCapHeight"]]},
            PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
             {
              RowBox[{
               TagBox["\<\"Class: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["\<\"Camera\"\>",
                "SummaryItem"]}], 
              RowBox[{
               TagBox["\<\"ID: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox["2",
                "SummaryItem"]}]},
             {
              RowBox[{
               TagBox["\<\"Status: \"\>",
                "SummaryItemAnnotation"], "\[InvisibleSpace]", 
               TagBox[
                DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                  Style[
                   Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False], 
                  Style[
                   Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                    9, ImageMargins -> {{3, 3}, {2, 0}}, 
                    BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                   False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                  Opacity[1], 
                  Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
                 "Connected (USB2.0 PC CAMERA)", 
                  "Not connected (USB2.0 PC CAMERA)"}, 
                 Devices`DeviceAPI`DeviceDump`d$$ = 
                 DeviceObject[{"Camera", 2}], 
                 Devices`DeviceAPI`DeviceDump`ind$$, 
                 Devices`DeviceAPI`DeviceDump`indr$$}, 
                 DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                   Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                    Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
                 DynamicModuleValues:>{}],
                "SummaryItem"]}], "\[SpanFromLeft]"},
             {
              TagBox[
               DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
                 Opacity[1], 
                 Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
                DeviceObject[{"Camera", 2}], 
                Devices`DeviceAPI`DeviceDump`props$$, 
                Devices`DeviceAPI`DeviceDump`vals$$, 
                Devices`DeviceAPI`DeviceDump`reg$$}, 
                
                DynamicBox[ToBoxes[
                 Devices`DeviceAPI`DeviceDump`reg$$ = 
                   DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`props$$ = 
                   DeviceFramework`DeviceExternalProperties[
                    Devices`DeviceAPI`DeviceDump`d$$]; 
                  Devices`DeviceAPI`DeviceDump`vals$$ = 
                   Devices`DeviceAPI`DeviceDump`d$$[
                    Devices`DeviceAPI`DeviceDump`props$$]; Column[
                    Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                    MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
                DynamicModuleValues:>{}],
               "SummaryItem"], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            
            BaseStyle->{
             ShowStringCharacters -> False, NumberMarks -> False, 
              PrintPrecision -> 3, ShowSyntaxStyles -> False},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Rows" -> {{Top}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open$$],
        ImageSize->Automatic],
       BaselinePosition->Baseline],
      DynamicModuleValues:>{}], "]"}],
    DeviceObject[{"Camera", 2}],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.713522544895258*^9, 3.71352263999677*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "=", 
  RowBox[{"DeviceOpen", "[", 
   RowBox[{"\"\<Camera\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<USB2.0 PC CAMERA\>\"", ",", 
      RowBox[{"\"\<RasterSize\>\"", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"320", ",", "240"}], "}"}]}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7135224528442545`*^9, 3.713522467449091*^9}, {
  3.7135226690199485`*^9, 3.7135227101149683`*^9}}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["DeviceObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False}, 
    PanelBox[
     PaneSelectorBox[{False->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquarePlusIconMedium"],
            ImageSizeCache->{12., {0., 12.}}],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = True),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
             7.717, 13.}, {7.717, 12.26}, {7.116999999999999, 11.66}, {6.377, 
             11.66}, {5.637, 11.66}, {5.0360000000000005`, 12.26}, {
             5.0360000000000005`, 13.}, {5.0360000000000005`, 
             13.739999999999998`}, {5.637, 14.34}, {6.377, 14.34}, {
             7.116999999999999, 14.34}, {7.717, 13.739999999999998`}, {7.717, 
             13.}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
             20.853, 13.}, {20.853, 12.26}, {20.252, 11.66}, {19.512, 
             11.66}, {18.772, 11.66}, {18.172, 12.26}, {18.172, 13.}, {18.172,
              13.739999999999998`}, {18.772, 14.34}, {19.512, 14.34}, {20.252,
              14.34}, {20.853, 13.739999999999998`}, {20.853, 13.}}}]}, 
           {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             4.1499999999999995`, 18.227999999999998`}, {22.025, 
             18.227999999999998`}, {22.025, 7.3790000000000004`}, {
             4.1499999999999995`, 7.3790000000000004`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             5.6499999999999995`, 19.191000000000003`}, {9.275, 
             19.191000000000003`}, {9.275, 17.879}, {5.6499999999999995`, 
             17.879}}}]}, 
           {FaceForm[{RGBColor[0.938, 0.961, 0.952], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
             17.150000000000002`, 12.803}, {17.150000000000002`, 
             10.559000000000001`}, {15.331, 8.740999999999998}, {13.088, 
             8.740999999999998}, {10.844, 8.740999999999998}, {9.025, 
             10.559000000000001`}, {9.025, 12.803}, {9.025, 
             15.046999999999999`}, {10.844, 16.866}, {13.088, 16.866}, {
             15.331, 16.866}, {17.150000000000002`, 15.046999999999999`}, {
             17.150000000000002`, 12.803}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             18.483999999999998`, 17.316000000000003`}, {21.165, 
             17.316000000000003`}, {21.165, 15.337}, {18.483999999999998`, 
             15.337}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Camera\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (USB2.0 PC CAMERA)", 
                "Not connected (USB2.0 PC CAMERA)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"Camera", 2}],
                Devices`DeviceAPI`DeviceDump`ind$$ = 2, 
               Devices`DeviceAPI`DeviceDump`indr$$ = 1}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm],
                ImageSizeCache->{228., {5., 10.}}],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True->GridBox[{
        {
         PaneBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "FEBitmaps", "SquareMinusIconMedium"]],
           Appearance->None,
           ButtonFunction:>(Typeset`open$$ = False),
           Evaluator->Automatic,
           Method->"Preemptive"],
          Alignment->{Center, Center},
          
          ImageSize->
           Dynamic[{
            Automatic, 3.5 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
             Magnification]}]], 
         GraphicsBox[
          {Thickness[0.038461538461538464`], 
           {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}}]}, 
           {RGBColor[0.7, 0.7, 0.7], Opacity[1.], JoinForm[{"Miter", 10.}], 
            JoinedCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 
             3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{25.5, 2.5}, {25.5, 
             1.395}, {24.605, 0.5}, {23.5, 0.5}, {2.5, 0.5}, {1.395, 0.5}, {
             0.5, 1.395}, {0.5, 2.5}, {0.5, 23.5}, {0.5, 24.605}, {1.395, 
             25.5}, {2.5, 25.5}, {23.5, 25.5}, {24.605, 25.5}, {25.5, 
             24.605}, {25.5, 23.5}, {25.5, 2.5}}},
             CurveClosed->{1}]}, 
           {FaceForm[{RGBColor[0.941, 0.961, 0.957], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
             7.717, 13.}, {7.717, 12.26}, {7.116999999999999, 11.66}, {6.377, 
             11.66}, {5.637, 11.66}, {5.0360000000000005`, 12.26}, {
             5.0360000000000005`, 13.}, {5.0360000000000005`, 
             13.739999999999998`}, {5.637, 14.34}, {6.377, 14.34}, {
             7.116999999999999, 14.34}, {7.717, 13.739999999999998`}, {7.717, 
             13.}}}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
             20.853, 13.}, {20.853, 12.26}, {20.252, 11.66}, {19.512, 
             11.66}, {18.772, 11.66}, {18.172, 12.26}, {18.172, 13.}, {18.172,
              13.739999999999998`}, {18.772, 14.34}, {19.512, 14.34}, {20.252,
              14.34}, {20.853, 13.739999999999998`}, {20.853, 13.}}}]}, 
           {FaceForm[{RGBColor[0.5423, 0.63104, 0.63597], Opacity[1.]}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             4.1499999999999995`, 18.227999999999998`}, {22.025, 
             18.227999999999998`}, {22.025, 7.3790000000000004`}, {
             4.1499999999999995`, 7.3790000000000004`}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             5.6499999999999995`, 19.191000000000003`}, {9.275, 
             19.191000000000003`}, {9.275, 17.879}, {5.6499999999999995`, 
             17.879}}}]}, 
           {FaceForm[{RGBColor[0.938, 0.961, 0.952], Opacity[1.]}], 
            FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{
             17.150000000000002`, 12.803}, {17.150000000000002`, 
             10.559000000000001`}, {15.331, 8.740999999999998}, {13.088, 
             8.740999999999998}, {10.844, 8.740999999999998}, {9.025, 
             10.559000000000001`}, {9.025, 12.803}, {9.025, 
             15.046999999999999`}, {10.844, 16.866}, {13.088, 16.866}, {
             15.331, 16.866}, {17.150000000000002`, 15.046999999999999`}, {
             17.150000000000002`, 12.803}}}], 
            FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
             18.483999999999998`, 17.316000000000003`}, {21.165, 
             17.316000000000003`}, {21.165, 15.337}, {18.483999999999998`, 
             15.337}}}]}},
          AspectRatio->Automatic,
          ImageSize->{Automatic, 
            Dynamic[3.5 CurrentValue["FontCapHeight"]]},
          PlotRange->{{0., 26.}, {0., 26.}}], GridBox[{
           {
            RowBox[{
             TagBox["\<\"Class: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["\<\"Camera\"\>",
              "SummaryItem"]}], 
            RowBox[{
             TagBox["\<\"ID: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox["2",
              "SummaryItem"]}]},
           {
            RowBox[{
             TagBox["\<\"Status: \"\>",
              "SummaryItemAnnotation"], "\[InvisibleSpace]", 
             TagBox[
              DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`lights$$ = {
                Style[
                 Graphics[{{
                    RGBColor[0.88, 1, 0.88], 
                    Disk[{0, 0}]}, {
                    RGBColor[0, 0.85, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False], 
                Style[
                 Graphics[{{
                    RGBColor[1, 1, 0], 
                    Disk[{0, 0}]}, {
                    RGBColor[0.8, 0.8, 0], 
                    Circle[{0, 0}]}}, PlotRange -> {-2.2, 1.1}, ImageSize -> 
                  9, ImageMargins -> {{3, 3}, {2, 0}}, 
                  BaseStyle -> {CacheGraphics -> False}], Selectable -> 
                 False]}, Devices`DeviceAPI`DeviceDump`opacities$$ = {
                Opacity[1], 
                Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`status$$ = {
               "Connected (USB2.0 PC CAMERA)", 
                "Not connected (USB2.0 PC CAMERA)"}, 
               Devices`DeviceAPI`DeviceDump`d$$ = DeviceObject[{"Camera", 2}],
                Devices`DeviceAPI`DeviceDump`ind$$, 
               Devices`DeviceAPI`DeviceDump`indr$$}, 
               DynamicBox[ToBoxes[Devices`DeviceAPI`DeviceDump`ind$$ = If[
                    DeviceOpenQ[Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; 
                 Devices`DeviceAPI`DeviceDump`indr$$ = If[
                    DeviceFramework`DeviceRegisteredQ[
                    Devices`DeviceAPI`DeviceDump`d$$], 1, 2]; Style[
                   Row[{
                    Part[
                    Devices`DeviceAPI`DeviceDump`lights$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$], 
                    Part[
                    Devices`DeviceAPI`DeviceDump`status$$, 
                    Devices`DeviceAPI`DeviceDump`ind$$]}], 
                   Part[
                   Devices`DeviceAPI`DeviceDump`opacities$$, 
                    Devices`DeviceAPI`DeviceDump`indr$$]], StandardForm]],
               DynamicModuleValues:>{}],
              "SummaryItem"]}], "\[SpanFromLeft]"},
           {
            TagBox[
             DynamicModuleBox[{Devices`DeviceAPI`DeviceDump`opacities$$ = {
               Opacity[1], 
               Opacity[0.2]}, Devices`DeviceAPI`DeviceDump`d$$ = 
              DeviceObject[{"Camera", 2}], 
              Devices`DeviceAPI`DeviceDump`props$$, 
              Devices`DeviceAPI`DeviceDump`vals$$, 
              Devices`DeviceAPI`DeviceDump`reg$$}, 
              DynamicBox[ToBoxes[
               Devices`DeviceAPI`DeviceDump`reg$$ = 
                 DeviceFramework`DeviceRegisteredQ[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`props$$ = 
                 DeviceFramework`DeviceExternalProperties[
                  Devices`DeviceAPI`DeviceDump`d$$]; 
                Devices`DeviceAPI`DeviceDump`vals$$ = 
                 Devices`DeviceAPI`DeviceDump`d$$[
                  Devices`DeviceAPI`DeviceDump`props$$]; Column[
                  Join[{
                    BoxForm`SummaryItem[{"Properties: ", 
                    If[
                    Or[
                    Not[Devices`DeviceAPI`DeviceDump`reg$$], 
                    Devices`DeviceAPI`DeviceDump`props$$ === {}], 
                    Style[None, 
                    Part[Devices`DeviceAPI`DeviceDump`opacities$$, 
                    If[Devices`DeviceAPI`DeviceDump`reg$$, 1, 2]]], ""]}]}, 
                   MapThread[BoxForm`SummaryItem[{
                    StringJoin["      ", 
                    ToString[#], ": "], #2}]& , {
                    Devices`DeviceAPI`DeviceDump`props$$, 
                    Devices`DeviceAPI`DeviceDump`vals$$}]]], StandardForm]],
              DynamicModuleValues:>{}],
             "SummaryItem"], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          
          BaseStyle->{
           ShowStringCharacters -> False, NumberMarks -> False, 
            PrintPrecision -> 3, ShowSyntaxStyles -> False},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Automatic}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}
       },
       AutoDelete->False,
       BaselinePosition->{1, 1},
       GridBoxAlignment->{"Rows" -> {{Top}}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
      Typeset`open$$],
      ImageSize->Automatic],
     BaselinePosition->Baseline],
    DynamicModuleValues:>{}], "]"}],
  DeviceObject[{"Camera", 2}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.71352247485748*^9, {3.7135226906718087`*^9, 3.713522713479336*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dev", "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.713522720640091*^9, 3.713522756586494*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"FrameRate\"\>", ",", "\<\"RasterSize\"\>", 
   ",", "\<\"Timeout\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.7135227584249935`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CurrentImage", "[", "]"}]], "Input",
 CellChangeTimes->{{3.7135224823149333`*^9, 3.7135224905544853`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Lv+UQuEZFexpjeJAm7wA/9rfyE/7yE/6Gp53Nb/q7Xg71P1htP/DzMS3lUHw
P/FtrvXDcMPr/uY3gx0fx3o/jHe+GX7wtjKo85pra6xLS4x9Ywy6JtyqKtyC
EmZEjjKsiDQiRxpTok2rog0qwrRLQ5UK/Q48tBK8prvlrCJX9CGWMCmm4H0M
PuLrPUXXnxBc47z9h35NOFG6TFC8Whth26AKK0qZiVY8uYZ24O+aP84sE1/t
2af77/bVM4/4fql8/ot+wdtE2VFi3B5R/ndwWUPjA+++vqPb2hvaV7Dr49Oa
lanrK7MuZLxHM96GlGlQclOPcE2v6IYB4ZYbPs2rPDeyoSSulZTaVZM71FIy
01o2106c6yue6c1eaL83VvN7f/XFbvK1vrq7oy0Xh2qTuiu8m3LQxdctCu6i
sSle+LLAytr42omEuskLDRPnakeTagbjq/riyf3xFX0xFV3RFZ2x5b0J5IHk
qp5z1X2E8sFyylh7ef3rqf9Ov99/eOL3N8jH59COv7yC2wvv/t7KM7hevUGm
muHkjYEMyCCtf3CEVjw5U4YsViIvO6F+v00iXyahs3+YgFuO71aQ5T5kugUZ
K4DnNYw+hDM6xm4hMym0TOVX//2OvB1EZmqRcSw83IGm3x2a5wBb9RP4taMB
vBqRO+koR9GI2KYQskfujIi8/7Zj/jvlgwTVvFkkzXmPO3IfseM95sl16ASP
jDevrA+wYC5pFx5pOFiS/YAVgFnMnkXckVsMzSNuzSNhwSVqxiZhzixmyiKB
BtBSYBNWMT0WUV0OEUNWYX0WESsGIbN1whrr92itF5FnEFfm3aWzRcRImFs4
yie6+nejrlSHH+vPOIdJuJFkC3xzpshygQjLmOeIQMjoaZzZAs5xHgPeCYus
xorRVCKQqs0UHg1cGDCNhZYNjRjvMI+1XQB3AIwLYLzQcQLjDB5H8+2zsLYP
8yydC9HWGcby2b4KOaeO5vjK55+Ww51WKQm2e3jmUk9G3et+ytPOxpc9be8G
ez+M9H+iDn+ZmofBzXLf15mW9131r9pqXvY2fxhp+zDa8Kr/3tsSr8ZEt/Zz
Ts0Jjg0xttUg+Q0FGJIh+pWhhlURxpQI/YoQ7bIYRUzQ/gfmQtd1tiYf4Y7a
zxwiyxBwYKOPxHpPMQaPLWtd+KB+zbhQxpyw5kqbEVqwChdKiQOlzEZr/kX9
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
yjB2ohU32dY42tq7MNj3bG7s3crg6/H2R30F4xW5I6U3O7tutHdeHS4Jrbpv
X3bLsuiKNfaeDe5+QGlHZM3g+c7pc+2TZ9vmk1tmLzZNAH5vGr/cMHa5YeRK
4yj98VY9FdBKHm4sG5gYGPn25r+YofHklw4jmki/LCEvxpAnbchsLTJBRp51
wHLK/2F4HVD3QDsykI/0ZCPtdyHdD6GEgYEChn5HBq4gw7eQsTuPp3KRr01/
/XEYBrQgQySkvxAWVsHwOBWKF6S69BMM++/CILz7NtJ1C+miJdc0Ce+Ah3Sf
3awdx68Rw6MRxqsZzqUeya4C9BvJoRzBqxjOfjSQ88gZjsOneY558xz34Tvm
ynXIgfMQcF4X5oMerIc9uQ46csjYc0qhOQ9YscoYM0sZMu3TB3BI6HGI67FK
GLJJGrFKmLCIGbGKmTIDIYtps4nrrBfT3CChtV5SFSWqsEFIYwNcdtZZK6S9
VkR97R71jUIaAL5dqttEtCW4DwajY/BRhk1XXYYyTMZyLIazHEayHcZz0GNZ
lhMFxtR8w4kCM2qeyWSe3WSu3VS+zUQuejzXnppt15/n0PrAvOSCIibxSFHy
sbLLyuQU5aqHqsWXFfCXFcpvqFTcUu1IMehNNx3MshjJRQ/m2QzkWj/Emt3K
1jMstNHKMjuc5Xw020Um3/MQ1vt4oY8c1lcR76dcfFqz2E+7xF+n5LReqb8e
8YxBaaAuMUivJNilOsaOFOZCivNtuBjS/TB2JC+0//bp9itOjb85Npx3qEuy
q05AVyVb15yzqk62oCSaVEbC5LciAuS/ZhXBxmWBWsUnFXLtZe5bC13U5Uk4
xBp1gCFEZl3gAWbvvQweQuvctqxx5KMVX3GgjNhQ+syweQEoV4MNorKBdvLC
OrjyvG89SmIdSnQdau/aPwZe7fyz/3Kvdg7+nLzBQntl+xrULiZGYWZVF9Ub
6dc6x9pevPrDf0HkN/HmM+H5s9Rx6unGdL+GNPvqOyaEi8A0LTF3QrE3Moar
ayf7WxeplJXByscDxJkuwhSIbZvblnq6ns71vVzqe05tfzRAnK7HjVHSBptT
eut/HyTE1Kd7UFIcCNfscm+64lJCia2JtYMXO6YuwOHtC+da54F4LzSOX6ij
/lZHvVA3dLF+6HJD/8X6vrs1o/frqG0VfYDZgfbvH/9J/PzjevfLTg1tl/vb
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
uBHrPYhNHgbNnsQ2f8OOQJPOAKMOf4PWYxCYDkOsOiOsqZEO1HiX7hMOPTDP
TdrfdwLiMpAE016HoVgYVDsOxDj0R9uiw+cwm55QK/p+B6OOo9DcFcr3y2c7
CiQabk/Q5ItUpm8uk2Dz48cO832bfGXFhzYPktkxAyZ62RUHpseNLo/UcJgq
B5oc+99nTvJ/d3K1ZTVy5vru5JmTfpC1mVHjwSpsquwS53aq4dxPN5efvfh2
XvqWnhDO/Plnzy8Pkn/6+djYlNtovXV7oVlnoUlrniPlVMJQS+Olax3Xb5ff
m6m4Pxs+nOTVfCy4vuTcZE/vtYnxe4vzj1fmHl6i3p2uXemPGaiO7KkI7+2B
HKYVObdkmVeds6rNcq2vcm+tD+mcCu+ej+leRHROQ2KpMzALTuqZPd1/kaHf
5LGfzoxfrx78qWb4xlL/9KWh2Te/zf7DzOQflfDn/8v9ZX98Ald/AkMjYK4A
zOajJ2SecWyVjW5+LxWCKyV/LlPAu4F/+O3v34BfH37bK/psATxfBM/HEFDL
kCfz4OkCmnr35yJdv3+z73WE2PXEuHWEqPUEqN+jSMLaxzdqHuPTDIZs0A7l
Ug3iUjnKvTeYY68Hx153LiVXTiVXnIILh4IzTuYQh8xBXhg2S0OFOnFIO+Ik
nPGS+zikrSHsMtZsUpZs0g5s0vY4aQuclPk6KWuu3RYc4mQ8jKjFDZhRnZUR
s5Ahm5ARQlifXVifSUifWYTAJkBkFyRu3qm7TZAgi1fyNQiqOKIxdm7/QoHx
YhH5apHVtWLr60WON4qdLpXarJTZXqZztdQOslxms1xqs3jeZqHYciyf0Jeu
UZegUnJc4lzgnoTD20PshL2NNrtoiR4mSrnIb3SW3eBmtMVFl7fQS6IjgdiT
TRopMs0qMU3LNzAps9WjkGWLDsgVH1SoOKxU5aZW46Ze687QL6nRy6DJm9AW
RGw/atBxxLDT37A10KgtyLQtGILOr6jR9l1xjt0JDr0Jjn2JLn3xEKeBOAhS
7kCMywDyX9u+COvuMMvuUAuY/3aFGLcF6jUGKpe5yebYCCQRtsZrbIhSxofI
sQRKsvsKrTm0Fa09cqCvPbLgwYw5MBILRuREh886nOjmVxWH7aUXP8utjp3c
/Z1+t3+3rfuvyknO1eYj3OrYWFFsjSiTrJOiR0Lw2RrK9ZtXXr95ybhc+ZPu
bRNvXnU+vJN45WrQ2ITXcI19S55de5F1S35kTWH+eHfr9SsdP/9Udne66OZY
1PC50N7kk73V+QvdPdcmR+8uTv9yaerBctedybpLvQnjF47TCryoZe7tJTbN
OWZ15wwrzxnXZB6oKfNqrT1OnY7snY/tnYuByW/XLCShayqRBpk40T2Z0L1w
sn8ZDZIdWqnrudQ0cHVxcGKhf/zd8wf0HUY/KNmvqPD47Qs0BOPtM/AOJr+/
r85//k9eL16DlTEw2g5mKWA2D+W/qASarl8YOaPguRhcKX1+ORd8GvzX3ws9
/9EtVPvxUw140A5uNICHXeAhFTyigce94HEPPX6eBS9/Qrz/GXx9RA/y39ON
+NV6/cQNhBMbiFGQTXpBG3QCNmoH8WkFbtAMgE9OrVDWvUF45WCc0lF2eV+c
gh9e6RBO8SCbogOLgh1O2gWyTs6JV9YBL7OfQ9KZY/dBvIQbB5Sw5D5oxDgJ
GxYJa1ZJG5ykKYRHxppjtymriDGbmAmLuB6EVZjEIkSERowJkZiEtVlFddfu
MoSw8utDNu4kbt1lpL6O5KcXWhXg3hkXcrHQeKHAaKXQ7mqJ45XziIvnbZbK
7S6XOl0qcVgpRsAvF8tsL553mCu0mckzGEnT7jql0hAtlRa5OzFgR8w+gQAz
XneSMCRYZ+cRtc0uRH5XA8E0F6GuJHJfFmmIYpxdQk6jkEiVdhr5JlJF+yFy
5w8plLup1xyGQP0S6txJDd4GjT56bcd0W4P12nxRLVarn0m7v0VHAMS8I9qK
GmvbFWNHi3PojXPsi3fsi4Y49Ec6DqBLYZj/7u+PgvkvGjvZFQojZ4gV9ZhJ
8xFC/XHV8z5SOWb8p3Q2x6mvj1JmD5FjCpLi8BZdw1hbBpNfK27MHEe/+WXD
CFz0sTk4VPa8lwNTZvvW+Suzqt+/Oge3rqa9fPRLoo2rN0f41bZ9HN2jJbE1
0pi6p1zgiYS0itIbN3769PkDI478A4CnX8HI2+ctD29GLS/5j436DVQ5NWTu
by1ybi4o7mpumR7uuLPSfvtS6e2pnMv9sUOUpIkSykxj+eWu7mtTQ7cvjt1d
gnTdGq9f7j45eyGwM8O+9bRFXTyhOlW34qxOxTm96owDVUW+LRdCu6aj+uZj
+6ei+yYTaXOQE13jidTROOpQbMdgZMd0LG3+bPdcSs98Y8dcR+/ywtDoVM/A
h6ef/oPe/c9fwMu74Pkt8OwK+O0aeHEX/PEQfGasdP5PXk+fgqVmMF4BZnIQ
szlgPg/pl1ErheLnEnCl/JerWQAM/evvhVq8PAFmesBYMroqmjkDbpWAWzXg
Tj14UAvu14BfxsGjKfDsPnhyF7xaAp9vMjYfAXAHgLsbSFC8iXykiA2k8K36
gZt0/DdqH4Ns0oH6PcKrFcSl7s+pHAThUPLGKXrhVQ7hlA6yKjuyKDngZPdD
uOXtuOVs8TIH2CX3sUsgWHe7wCeHpD2ruA3LbhvW3bb4PTDtteaUtGMXt2QW
RcdZzOIkZnEi2y4Dtl2GLLsMmQQNWASREa8RJELYduqz8xO2bCdt5zfW2WJ6
WD2w7Kgx9dT+mQLDuSLjS0WWl4utlktsls9DndosltoulzouQf2WOCwX2y+V
Wi2WWi2UWM0XWc5QzMYyDXuT1TsSFEsTZQtj9qT67DlxUDDEWeyog3CCs2SE
tfBhY34fS5FcN+HORP3ObKOefNNz502S84nG5ba6+dB/XSAK5w8olaNCaGjB
MP/VbfAkNvqSmnwJLcH6Ld/0a9B2BGbBph0BZp0Bpp1hMP+1oUbY0aLseqIc
+mKRZvtjYBbsPBDnPBDlNBDl3Bfl1Btp0xttQQs3o0WYdUXYdIaYNQfoN/io
VRyUzTMROqu1MVabJ1yV/Zgkc5A4p89OpoN8a2Dya8eNLn/N8WhzNxGHyq50
cZgG1C8b8l8VdjT5So4eP/818/n7hSkbVxcufH95xEp/ctG/QY55veYmYgAh
PDmumtpw/efLH778+fkrii+fwP9pPn0Ze/V71y8PE1dW/IeGfAcu7G8t8Ggt
9emsPD/Y0ro00n57qf3OUs3tydJrQzkLjXkXm8sXqdWXe5uvjkM6rwx1Xhmm
XptovTRcvEJNG68JHi5xb0+3bswwLD9pUJ5lVJmzv7rCq6UxvGs8pm86YWAy
fmDydPfCmd7FU73zp/vmE2kjCV3D0VC/1NnT1Nmz3QvVXTMNfRdnh0cm+wfe
P3nzo4UY718iXv6Mlga+uYv2pLyjf/L7PfDmF1T8jHYh/UArBPxP8+QpWKwB
02V0/6Ug/c7lgnkKvQSLgrhUChYKf3vYCMDFf/3trz6By01gvhrMpYNLeeiJ
dqyUgesV4EYFml15sxXcaKGPphwBP7eCX7pRp8OTJfBiCQbbfEYn1pPi+QxC
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
+Pj50pv3009f1D26Tbk8d3q6LWaollyTa1qba1ybQqo6TaxEaEMqTqtXxKuV
xaqWRquVxaiiNzHa5TFaZdG6FbE6ZfBNnPr5KLXzsXuLo+WKI2SLwqXyohSK
483Pn7C/kBLU0hvZMxY/NA850Tcd3z0Z0zkTS51Nos6e7JpL6J5O6ps71Xcx
uX8pu3cls3uZ1jo11LM00NX2/OEdZG0/XkD5lb71/uNb5GvvfgPvnoD3T8HH
52gB++fXP/RzAOr3yQpY6QejVWC8Goxno7B5KotOJphIBxPZKHhmdCT91Aju
UcHDKdSk8OsouN+P9hVeGwLXu8BPVHC7D9wZAPdh8DwMHk8hITP0+2wMvJwC
X1bo4fff/+nf/rkBte2Hb9KNgqzTDIBwqvrwqPttUvWBMGZu4BQPsiscYFFw
YFN04pQ/wKVwkE3RlkXBhl3GCiHtwirpxCZtyyppw7XHAS9ux6i2Wi9qySts
Dt9DeMTM8TBmFjJGiJDWChM5BI1xQiZ4fmPcTiNMwAITtMT4iYht+tgWHZYt
+nSI7NsMRNYTiQpuZ1ydL0SFjacZzWSZzuWZzuSS53Kgw1ot5plB5nKsLubZ
zBWaLBSbwowYMkUxRTOfc0270w0bzxjUnNQrClc47S4QaCHobbTVWXvzIRK/
jyFfoNnWM1byNQHmzaeUqGka1HRSd6ZRQp5JeKqeepa6UqrSrgxj4SyyCMVR
rMBFudSVngJ7alb7aNd66NR5EhrdIYb1vhBiYzDEpOWYaVuoRXswOnzuPmZF
C3boCoM4d0fAJ0x1ETS0dsGl+8S+3iTHvniYAsP814wWQqYGE5p8VGvcFcoP
bMqUWZcqwRkuwnZMYG2gGOYjiB0WxFy2ouJnax7MDIcZQ/2uxYgYpo9h2hia
2c6on4QhtDz9/lecfnkksNpwtPW7bSlcqwOf2eiZLwMcXb8q6Dv3B4fE51CG
R5vuPbj4Bv5f8vXNUwB++fDh0ov3c49/r3h0OXVp8OxMe3RflXFtrlFNjkFt
im7lSZjhQrSqTkDnVa+IUymJhEAJq5YmqJTEqpfGQaCEIWpl8Sol0Uol0YrF
UTKFx6XyQ3bnhcgUR9oWJuyrOBPU2B9Fm4oZnI4dmkkcmIzrGYvpnI2lzp3u
nE+mLiTR5k73LCR3wS9n0zsWMjov0pqnRrqXBwfaf3t+D7z7sXGR//Wi11x9
+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
qH/ey4I2LzDy37/896+FCzyrA+s4VsXL8F/G2jL4PeJrMMG1OB3epFyv+r60
n2/Mvnv37dgE/vR/9O5j//s/ah7cip6jBQ7W76NSrBvS7GrS7GvPuTZluLfn
RTWfTx9rr17uqbhIy53qyJ5s8x8scW5IcahIIlMigmpyM6ao6bOdqVPtx2Yr
91PTFCuSZEripPOjJCmRmpREnaJTLuXVno0tQS1DIe1jkY0jEfVDYbWD4ZCm
4ajW8diOydiOibhO+GbsRNvsqY75wo7ZYur8bPvoXMfYs2uXwO/P/uH/8//p
9W3C1bu/nTN//QxePwYPrn16eQmVOP7v/vv5K/j1GVjuA+3FYCyPDr3+ilGw
MXce/NQA5ivA1QYUHt+hgQcD4PEIqm3+dQytWvjlIniwhCT86wiqs4KO/3aF
/l/6X+o2v/zzofrLe+DaDIeSJ17Fm1nRH4JT9oJfciq6ccgdxMkc4pRzw8Hk
V8oTJ4XGbnBL2XFJ2jJ6ezklbFhFzHAw1UX7uM3w4qZQtlC8bCJmLLvIrKL6
EI5dBhAmfou1O83QVCshAiasgwlqME6Y16CjKj1U8yxIWLNLExNUx3bAdNgQ
26mNoYhaD75h2qECkdyiKs6ndMZKuTbQZuSc0WAqaTwdMZWtD1nKNVzMMZiG
WXCO+UyW0XSm4Xym6cUs84Vsq7lMi8lMM8g0MmXj0RS9iXQS/BOG0gxH0vQH
krV7U5V6UhQHUnRH0okDqaShdKOeTB1qmkZIrqHPGQ3FdB2pZNWNaQaQXRnG
4nkWUL97C519q8MiOk8n9VVmzbRlLHUUXB84s1gSN5kTM5kfPUGJmEoOnTjl
O5Tg1R/j0R93sDvq0MCpg/1JMOd17Ipz7Ipx7o617463o8XZdsVD7LpjrKmR
1l2oZMu8LRDqV77KY3fRvp3J1psTTXHHRdb4b2f2FsLcdyL9uvBh1hswC160
uYyEw7Tx6PBKkxuhzYNpcCIjVlwdnrPr75dHjJMrnu969lm+q7xiFD9Lou/c
YMx1Niekra/o8e2bqLyQ/nqDzp8/DX54U3X3Zvh4b2Df/+HtPaCivLq+72uG
aseKCKIUC9WCoPTekWIvMWqMxlhib2BBQNo0qgpYQHqvQxuYXmAA6U1AqhTF
3uv5zrlG8pj7uZ87edb7ve+1fos14EiSFf78997n7L3zthdEb8yi7Uil7cqM
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
NQ/5Reul1dwhRA07KXX8AsZiGCE7Sam7yC52kV7oQFR2k1JZj8JjVQdovthC
84mrGiaYKs5CE2llE6KSMUHRnKhkSVBeR1QxnqFkpLBgrZbiumVzDS+5W8Yc
2lkSaFNJceKG2fEjoPm6QITRNsIoa4ggykoQYcMPhybriAhzFdBc4AthpNN3
/w2zE0Q5CiJtBRG2/EgbbrjVhH7tedCRqa6QCopzWahDaLjDlUDTlZG2S4LX
SfSrRnFdEuahE+VleGfn9nuHDuZfSBaVFraJOOPjFaMjpY/EZY9qykdq6AOi
nH42JKM7L60rN7674s6D8lttueE1yXtZ3j9XnNtYfmkDMt/zG4vPbyiGYbP3
d/3ST7sXnHDNPOyQ+ptp/LZVUW7qZKuZPiunnVwld1RX5nd1Aoyff5qHbZ+N
bcbzX8fpaPKz5TQ0PAfarqWCtNl0KWjExvKoBK0/sbBb/Yfkd+ZfFy5Mmjj/
lUyOnYv77xIUchvtXRp7K6qCVfzy0difqSGa9/YJVH16m9HTcbGO8Qc7e1PW
Hc+0mB2pN/blJZBL7t7gZvDaa+sG2ttGetqGe/hjHWUP76fU5dwTZyZX03Oa
KkXddW1PulvGHtwfbCkY7bjbyr/CTzlefGNDdojjvUuOt4Jsbvjtjk84kpV9
rkjgU1rtW1oDuVxa41NcdZUu8KXzffP5l3I4vtmcK1ks/2zetVz+nRwW1C+r
tKyiqPhtXz1497/x389v0RVKSc/vu1fgxTPUjft0ALx5AN72fnoz9Ped+28+
gd7HgHcD1axg8MyNBJwwwA1DFgxVzKOhF6IJqsJwFUfiAypvojEdQpgmwz+i
oh6lujjQmAxa0tG1q+4sMFAAHhV/ecwAH8T4DNt/uUnyAXx4CXrrAbdg6ooj
01YdhTEzZIrBjkmrtsrr/jpZb79kqob08u2EpVull++U0fpJTmsLcYkXQWMT
UXMzQdMNOqz8YsvJ6taT1dwmLXaVV90Awdt47VH1Cfqsqgu2yBXTsEclKWVX
hCoOVK4KKi+jIvMiUwTutgRlC2yBObbADFM2JyobSKmsmTffEKI+b43mfKOT
TuvDfjsC9cuiuXDDLSBCKOFIJ8F1S360BYQbZcYOt4BwI23ZUJtUOx7ZpirC
GoHnvzDJFUQ68SOh0m0E1225kdbf9Ut1gXBwKskuZSEOgRF2F66t1Yuw0wgy
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
zxhbYICYjSxYWsEIskhhzSzpZSc87SlH9pYGm5eTLJkUUw7NXEQ2g1RRLEVk
Cy4MmyNgtGzHoVhU0KzKKRZMmhkrzJxLM+aHmXAoVlyqNYe8nktxr6LYiUg2
rFA7NsmeR4FpMkqQYTQOnbeSbJ9Ps8smWV+MMD8dariSbKh1TX9eoKVikNVs
koMizXUl1VOX5HY282xsfWyhOL9prF74uIk32sAdbuCNNtU+6Wh+1dv1YezB
+xFI+5shwYt25ljDzYd51NZUn7pbP2Vf2lPht7PksmfJpfVF3p6FpyFbC09B
nIpOOhae2Jh5yC1pn/HdHTrhbopXzGZ5r5U/aSJ1ZA22Xx3bt/h7/9EWRcxr
FmY3HV9bNglhMRXp13Y6GuRuNglbK4WuUGpNrD1aONH5qzBxeWPyRPwsjXf+
Sk3odwkBW6MwVQs7GurCKE9rbGB+ejX2Z+Qm2Uyf9X7wel+d733entzEXUXp
W3MSf89KPF2cc52bkVBL57X1tD1+2fC4D1LzuJXZU5XfUVfw4D6rpZ7X3tw4
BEPrwdYnvY3DD+IeiIJFRe55t8xuh5jdvGgcdcEi0s8+NmR7bPyehNSj6WVo
BEeB4DK9+kpJlV+Z+GppDbTgK0VV3rm8C7mM89nlgbms4AJOSm5xen5pevyd
npamz6MP0W3D/5fP4z7QIgYVp0GVL/JW6LYCChIyzIJRIkxD5SwOGXfhcJQd
Q9lCzQppeNmZBmoiUUd/dTS+nowOnlSAF1w0D/Md/K/owZX7PzQwjveBNjE6
maq7PktvI2SavqQr4adJWjuJy7dIa2+T0ltPWO5EWOJKWOKCabpj6usJ6u5E
DQ9ZNUepRfYENWeiuouMpp20uq2supX0YgsCfmkZ+a8qjJNhVmuG0t6FklIV
1LUVYb4lQdEGU7TFFsDI2RxTMoIQlNdg81Zg8/SRihVNsPmm2Py1mCL0X6Rf
udlrZWYaqs1YozHL6JC9EeXgjsJg62ISFKk5l2ohhCE0xUxIsRVS7Dhh0G2t
qyJteVSoXIsKinkFxYxJM+dQzXk0Sy7Jhke25ZBdedT1AqqdAC9t8Sg2Qoq1
iGojCLfh0iwrwu3KaTaZYXapZOsrVNNzgQYryIbaQSsXhNhAZpHs59KcV5O9
dANdj2edCa+LzhDn8AaF7JE61nAtd6heMNrU+Hjwwevx3g9P+j4+6fk02vF2
UPS6g/20KW44n/og+Ur9vcPl1N/Y/rtLfDYVX8KD5zNeRae30c9uKTztVnTG
teD05qzD7sm/Wtzas4q2cV6AxVTvNfLH1xEPrcYOaGC/qhF3K2I7ZmHbJP1H
+PIFWxybKUjOtjMwm+kEc3nkv1C/2hPNgCo/+O+MH+5PSsyXiKt4Jv42PSJm
o6hmseg45ZdKRnxXJ/PTi9fg63f/fYfqV19yXz++3d9xqZ63j56+uzBzV376
mZw0/4ri24Li1Hq2qKuraXi4fqT7/nBXzWi7oL+h8mEj42GD4EFLVXd702B3
22hf23Bf+3BfUndteHXZ7+x0jxSaeZyPyc3zljcuOd69tiM+ade91KMZFSdy
2BL9+pYI/cuqIFdLRVeKBRcLOJfymZBr+azAQnZmFiMntzI/KaWvufXr01Hw
+f8g//3fPjBUH+lClydZfkAYirJgLu27zyLZ0gA7DAFTYBhU8yLRx+9N/WF4
LRqn9gaouwl6ksBoHnglAh/qwYc3+H+FZIzPv7v99e4jGGoCdQw02aM2RmGF
1zRd98l62yfpbpuMrwjElm4lam0n6K7Hljh8b9f9AVlVG2kVK6I61K+z9FIb
KU1reTVjGWi4MLeFLLZG1zPwGjKahCPJeZXtiAssCfMtoAtjc8yxeebYXGi1
a5BUlQ0xxZXYvJXYbD1s7jr0F+eaIvOdg5g8b53MLAP16QYGi+1+MV5G+XVD
TpB9QagTj2IBgcksDKR5ZEcB1RlaLaQ60gY5KdUMGnQ5ybSSYs4mW3OhWkPs
+KH2bJITn+YK82JumL2QagmpolhXU22hd6MdDRGWJeEWyeG2CRQrv9B13n4r
9aF+Q1apkuwWhtrOJNnNpjqsCfHSvep8KPtUsDgsXpxR2FNRPlgF4Q7UiUaa
Wsee9b35MPBh/NHn531fxzre9le96+S+aL79rIDy8J5/Q6q38M4fvIBfSs5v
pV/aXOgjqTxvKzm/ufCMZ+F59/yzW7IOe6bst4nZb0TZPjfEUtZ7pdwfRoSD
K7HfNLH9alJ75mA7p2Pbp2GbJ2Fe07D18mj/L8R+MgqnoX5tZxAt5NAAq5UT
50eLfthZ9uflK8nNScIEMvifQv0aSmGeqoYbLE7SvJmMG4/6mZ+efvnTAd4A
MPz6Y/7zl4n9g94NvP2MnL35WfsKc3zzsiK4zMQqblajuKavs26g6/5QR21/
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
bKG5lMo6KVUTgsoKwsKVyHChYJWh567D5sMAeBVKhOeZonx2HlTuahxDlNvO
XIHN0MOmr8CmQSGvwhRWY9PXYApQy1C5S7Hpy5BaIQrQfDWwWerfP525FJuj
pTRFf5mS2QEjVcrPDpm+2mXUdbh+TTihFqxgMzbyYovKUHMII8SsPMS0Auqa
ZM6EH6H/hpixQmEiDFVsziHDd5qzSSaQCf3C4NmSFWLJhgF5iC2kgGSbE2R5
hrzuWODqlSEm2v5r5vnbK0L/DbFVJzssCXHVonquDd/lmHDkUHrwNf69pM7q
5AfVBd2cooe88j5exYCAO1bPH2/iP6mHCJ62ch830cfEad2VYZ153rzYfZzL
O8vObCk+s5l+elPxuc0l5zfT4eszXvTT6/OO2WUdM08+uOLONvVw1wV+q2d5
60w9oy5zdAHxwDJstxrSL/RfGDmvn4I5ymL2Mpi1LGYjhy5iOU/D7OUwayk0
gsMAPzz6s/is+O9m1hEnis+T8D/SmIYtn6nmqLLuZ4OL1JOJRTeb6rgvx/vQ
javPaPjV5y9f+z597nj1Oq239sZ9xlFe/NYc0uZMimdK8Ib00I0ZpN/SaYez
o2iM9GhuHo1JDynLvVp593gmZU+Sn1f0qTOJtChuTgw/L05YEFadRRaknSqM
OpEf8UdBzKnSu7/nx+9Nv/lrSvKB9NQjGYzjOSyfvOqL+WLJzkHvnMrzWeXn
M0vPZZScSSs9n1l+Pot5IZtNyuCQs3jFaWXsAm51SfbbwU786vLf+e/rt2Bs
HCW/4w/B4wdgtAOMdoIX/eDFCHgxjCbXQd53gs8P/2byxtfP4Plr0MpAa8sk
dWZWEALKFn0MRS6MGpEiQH08GkTZWQQeQvWVgvZilLry4wA3Fghuo8alqtug
OhzURICWJNCaDF7eR3M/0DKIV+ggGAYGzwfBcA+aY9lQgMZUiuPRqVPNdaTi
2qhJyz0nI/G6Sy45Y5rOmNoGhKSTCOa5kEWmqFS10AI1CimvQXcjVXQwVV10
YguBRqy0ElNcgc1fic52UYS8Cpu7+nsNeY4+NlMXm7ECMW05NnkpNnUVYsoq
bNpqbMZybBr8yhL8oyY2HXqxGjZTHb1ArzWxedqzpyxXUzL62Xim/89r710w
KKE6Qf0yQoyhXUKgz0IkjlweiEOyhHx/TyhiwqnNIVDIbLIlFC8E2S7866F2
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
bj5vnIN5zkTzn22hfich5ULntZyMrZNClecVE4dH6j90Ds6euLnxL/qV3L+a
it/R0pPCFLCD/rvuxIdVictGelo+PB0C79+joRufwbePXx69/9A+9rhgeDCl
qyPmfs11sShSzI6q4cTWMCGptZysRqjf++yu1pq+Tkhjf1dtd1vdw476PtR5
BKkZfSAcbOP1iSs6edltjKS6fD920fHcxD2ZkduTyPsTo49k3DqfX3C5pNS3
mH2FzjqXwz2LrBbp90pRlQR8hDv8Cvt6CiMmg8XKKixOzBht6/g2/uw/H/h8
f2Au8OEbmjz5euR7FfrZMBgfAk8fIF50ocD1nyz/fQZz2F5Qfh3BIIPSUCTe
Et/vRszES9BCCqjwA+8a/vU8F0nyHRiuBqNQwjUokB5qRIOgx2vAq0bw4SF+
heOHB8YVT16jLYd19O+7C8W4fquhfqlSCy2kkPmuwxYZIxWrmEjOc6WVLKTR
KGZj1Bw0cw260DhrHTobgjkvMl99JNgZEvSwGfq4wy5DH9ELdSRSBbyYPHU5
NmXZBNo4S5HAoQtP18E/1cHkViLkdTBZLWwyfD+MpZegt8GPU5fMlteUxhR+
sdMNO7kji+JaeXsnO96Ne88dileQ5FydYF99z776jlPVbUfhbWfBLSfuLQd2
rB0nzp4VY8uMtYRwbtixom0qI20qI2zYEeYQVrg1M8yKGWbOoJiwQi1YoZaV
FPNKikVKmHlC6NpTISZH/Ay0Q0zVfVdPu2o33c9+VqDt3GB7xRDnBWQ3A38r
j/iffHLCycyEjLpc/kj1/cc9DU8e1o93QyHff9zX+HSw/tkj8eP+ohfNN5qL
A+tuX+JF/sYJ2Ek/v7Hgoleej0fuGY+8M26FZ6D5OueedMo96ZL9h0P6IZOU
g2vif9GO8VALc5hz2WTaudXTj2nJHVSXPoAPb/9pDrZ9pvSGuUSPWd/1ayOP
Wcjgy1Pk0dgrAyJaPqiNi3fRxNj2OROXNyb9kP9K/eC/UNoLJ2GrFOdrzz0a
8GtialRdI/Pp4PDH5y/B+4/g4+cvn759fPdp8O2bttGRiqH+/M7WW/U1N2tE
18WsGzWs+NrKpHpOXhO3oEVQ0Xaf091yv6+zof9By0B3c39Xy0BP21Bv50h/
+6PehrGHdcPdoqFmVldNTrswqa4iQFB8pjj1UPat/ek3DqfFHMu6fT6P7lNY
eqmQc7GAfSaLdSqz8kImyyeL451Xdbmo9jK95jJd7IdSY+71pMqbKayi5PzS
DPqTjibwdOSf3mKGIfS7Z+i2xpvH4PUYePUYtcy/GgJvHoH3w+DLk7+pPP+p
364OwL4BysJAORmUhICyQFAagCfCwYAVjPtvKKimgA+NAIz+VY8fULQAA/VH
MOPG/XfoPkq9H9eCkWrwZfhf9xzB30vPX4MOERDR8WtXN9Hljepw/FpX5Pc5
kIvXYuomkjlU2AIjTHG1rKIZBFow8lwFI3RvauY6TGEtipkV8C4hBTxOhsC8
FeawU5eg+BkVnWDwrIqzBAFDYvnl/4XkUxgqS6rNk6DbamIyKzHZVZjsSkxK
D5ush77bFPieZbgdL51PXCKHzTloqX379J7kUPvSW1s58S78xPX8JGdhsktN
oktdyvqaRI/qBDfBPTd+gis/fj3vrhv8yL3jyol3YN2x5d5yYcc6smIcKq7b
caNtOFHW3Eh7CHxRGWbOodhwqTCDtmKFWSZE2MaRzY+EWBwIMNYONVfzXTP5
6vpJvm5z/ByVglwXhjguIrus9lnzU/LPITnht7nJxc2c+vEHDY/7Wp8/6nw2
0Pqkt+3JWOfTJw+ej8MX5a8eRdWyQurirwpu/iEM2EU/Jbnn7Jx5xjXnnGvh
Badc+OKMS/Zpj8yjbmmHzJIPG975Vef6BjWS0+xLZtPOGSkcXSb/6yLCfpj/
qmI/wRB6rpznPKn1syf0K4eZEbG1sggDaZT86hORfv8UrxJuvjMn2n7lJi5v
yPxQv1KAb56JrdFeYad14tqhtJybjR3c12PvP7349u39/0fZV4BFlb5vHxBB
BLu7e+1WDDrt3XXdsrtWUQxKQgSVMulJpoChmwlmmKC7u1EUu+P93ucM489d
97+737nu61zDmTMjy84999PPB4x37z69ePG26cWT8s5WeUtDemUJpTA3KFce
mCPAYOVlRJVKUyoBwqp8SV1JcVNVWUtNZUt9dXtTTUdzXVdr06NOfC570FLa
1ZzbWZdZX8KvLGLky69mJ18SRNhGM89E0f+IDDnDD73IT8G4HI1lV2zLS/+D
k3qJnebAE5yPUDrGFzkm5jslF6iW/96jCTG4Yfy0GPHjmjz0uPG/sZfk76un
gDfd6PVDmNmuApRMPP2b2sX/i7+lRVAPCcp7AyVh+5lEmhcSeJP89ULya6gi
4DN09f55n8Kb56gJe99VqLkMnF+MthwA9ohrxX9fuvniBarMQ+JEGB+de6d3
giXZfwTTICcaaU1a2WfyKuimh/E12Mld2WfU2j6jDTRGk2WQg5YBhqyAiqnB
i6ESA0oy5oHyQmAKO7ALif5zSNtYZSpPIAaR/NWfBnoKLu13gP7AR0JnLkgt
pifWWV1M4WmE1nxCeyGhvYDoi29T6S9JXnyn7rwJfWaN1p66a/3cG6d/4d2w
Tg8G/ZUytqj4m820zGPb5IRvVjKsleE2CqZ1NsNGybDJYmyW0jdJGdaZNIss
mpWEYiEJs8wMscgKMZEGm0iCLCQq9/meifiuWeY9c1GAifC+MS/AnHnb8Kzf
6uOeSxbfNJjpumSgi9lgN4uxbkYTPUxne5jOv2m97rrNLvZRuxgvT0lwUlFi
8cMizN+yntbKJ41lj+srujuqHnXVPumq6enKetEQVafwL4+5lsc+q/Den+K0
Nd5+c8wl86jzFnw761g7y+hzWHwt+LB5wYp3bEP40VVh+2YH7Jhw03yYk5H+
hTX9T07ve2RS30MTNEF/YX6O1raRmluG9e4P3ahNrNWEtb8rdIilusQibeDv
HPXYjdHqbd1D1MlfVdvgF/0l1PWTU3SJpaPW2Cxx9D0fncAtqyl49fjVpzef
YW/ou08vP3x6/PJN6ZNHkobaxMby8EKZpyLlqizRQ8z3ksQGS9PC87NiS8Rx
ZRIB5m99SXYDNqErKlrqq9qbajF/O1uaHrTVdTSVdzaUddQXt9flNJTHVOcx
8sRXlQn2Qp5dLNU2KvRcFONsJP1iVOpFfuolvsguQnCOnXw2PPFCeOIldvJ5
rtQ+Ots+LtshPtstJss1WhJITw8OF8YzY6QJmU8bCqGG6r8cn97D0Ejs2j/p
gsntMLy9E/CiDfKz73tIz/c/HA87UV42koag1FsoFevvdZSCJfg6SvNA6Z6q
FPD7LG9UTUcfa8kdCl8dr96gjk4IgGO/u6UAoOIvNqdbZOTYnG+mePU8QeUS
JInurfRQ3oUQtOIe8BcGNRvpTFyhPWE5dAyNWgTDbSBVtBpqI0cuA+d34BLA
YMzipb3BZGz6YmAhhpDUYqL/QggaYyHGZvMg7LSOJwZPhBiU7hQgLDi2CwF6
pGOr/R3RF5vK84h+80mSTiU05xDa8+EKXJwKjMav6jeN6LuA0Fk4RWv2HP1F
VgZzLh77MfrmVkHQ79j/zaRvU/FXEW6Rw7ZWsjeBFnNs8ON8FiArfIsKUiY8
hW/G6kzCDAMrOIY8zCYrxEoUChCEWWSEmseFWUUFml68t+z0zbkrfdbMc1s4
9Mr6UR4mk9wMpl7dsMTNeM0Na/PAAz9ybPfFXTkr8UvK45Z0yQofNJY8ai5/
WlfaU1P+sLWiu63uSVvDs478l5WyR4UBdSLvksTzirtH0jy3xjlsjrlsyj+H
YRVta8k/iz1fDCv+CYuIo0bhh9aG7Z4RuGPMTbNhzub97db1OTFZ8/gk3UNj
YfjGr+OInaOI7SOIrcNg7IaRNhjPazR7Zz4vGUAs0AX+zlbzV+X5DiUVVlU8
qfUVc1WHPinTMwliiZbJ92u8Ap2T0lIramteP3sOdZPYIn3/uefjp46Xr+Td
D6LLShi1eT7y5DMi5h9Chm0i5WIq0zctOUSRxc0TRBZlplfmYW0V1xXjM7af
K9ub6tqbMRo7mmpb6yraaspbqytba0saKuNqlIzc1KvyGAch51JcyLmo+xf4
PFse+0Jk6sWotAuRAqi5YsbZ0mLOMaLPM2POsbAh3RvLuhIpdonKDKYnUzmC
DG5cbkrmi5ZiKF3+L8f7l6irBT3pQA+aUHcj4HEz4An2f6tAkd8++vc3wUdH
C5JlIjEVpQailJsAMKFvgBcMUayrKPPGS8ktsp65/a8O9YsP4M+2V8AKpNZC
4G9rDqArGz3IIauvv/kdHmC5T0FZXNVcaOg9hPZDzOL7MKh5wlqticv7jF9K
jF4KNcxjVgJGkz+OIDO82L3FGIBt5kVQ3zhoMpm9ndNbT6WnAlkb2X8yQG8S
MWAyeK+YiTozANhs1p4FgSnM6L6zCO3ZhPZc8HYxW3WmENozQHb7zQT0n0To
TyGjWFPgJTqzx/WZNVF77rZFE/1O/8rH+huwS4TFlG6t8n+V4ZbZWIXDNyuY
NtmYyCxrLMcYcsxo9iYFe5sMPxW+CUPOtCbP5hgypnUWw1JOs5BRzSV0SxIW
Yqp5It06OsTUMXjtGd+FK/3Wz3VfMsZ13birGye7r53msX7OtY0LvU1N/fbu
ZJy7JAy6lseR1InzO3PzH9YVPW4sfVJT9Liy5GFjaXdT5ROMZsnLkuQHirvV
STcKI89n+x/NuPpDguO2mEvWfOzwYs213Rx9zjLqrHX0OSv+aYuIk8acg6vD
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
GbQ1AvpalS5z6Yb04DWud9fbeS1d6LFghuOMMU6LRl6eP9xp7YgrBtOcLWa5
WU/bPXs/5YhrrPf11Lt3FXxKcQozP5aaw0+sVko7KzI6KlLbSrkt0ntFMXfK
E3wK+S5Srwtpzj8keVlGOFmxfzNj/mzI3IeBHV4j9mET3mFjDojvWsae5ZRd
8+5tnea7YcrNdcPt1+rZLtE/NLvv7ikaP06F4PP3g8m1obqEqVZv/QbYz6Tl
rMI89cJfVduvrjpy9W3ySMXfYSTTFxD7bX92u20fHxtaXiJ63tn+6flT2LyA
PzufPz17/TLn8cPEqnLHwujjwtBtvOub2Nd20+/uCvG9JuZ5ZkYESJJClRk0
RTJVnsTKFsWW5WRW5uc0litbKuRNpcqGEmlVnrSqWFZTGlUrpBbE2it4h+Lu
rqE7Lgo4O9fv0hzfiybevlsDg/aEcLDnaxuVeo6fdiFafD5SYMcT2nIyzvGF
ZyMz7KIyz0eKXHhC1wjxfZ4oJDorIyoxhs5rLC542dHy78WT2IPERjI2lVUx
56+PD9ilfQXznzGFO3PRm9p/ep9P+HugEJWloXRflOCJ4t0A0S6AOBLxrvj8
uSQStQr/OsnqxWvU/RC1NJMd+n/pT3wFZZyvOtGnb6YQvEYQsq6UQn1mThDZ
9nsbZd0n14/eQZm3iMHTiCHTYPGB3hyi3wISqtbd6YQ22UHQh6xP1hjx1UCH
oaTm6qttXRV/B6sHLQ38io+6ajrrqenZXy3KKk95qLpJZqDaWtYl71HdP1z9
jaFjMGXUAauNYXbzRPdt0oOx+Bqr8r+qCXVSirkEI8xCEmqBxZcUZRUsMKRh
m6RhmzPDbEhYYGDxBf2lGWVS8TfAhkzqRpVq8+lG7OC19nfXn7mxfKHHkllO
c0c7LBtlv2y4k8GIK+umO5vPcbOefWT+76H7bsTfvisIpRbGM0uTecUp4Xnx
SZWZkpa8zPYSjJi2LHpFMqU8MbAo5kZ24BWhz+E071+iXS0jDhmz9hox9hnS
9xkzj5myjhtzMH+xEO83YO5ZTP15dsD28bc2DPNaMeTyAt1zs/ofmtlnzySN
n6YSOyYQO0bAnlDL/oQZ9n91iHWk8Yz5u1BtP8/9c/5XX+2yfCu+hNovmUiM
NBx11G6Pd5B7bByzvFz5tLPp04tHMHny/cd3Hz8+f/VK0d0UV5nrWpB6MpW5
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
THCIp5+PCjnGCTrKDjzKDj7BDbONjLwYG+sQKwXCxme7JuS4xAEc4+XOidlX
krKdE5UucfnOMTmhXEkYT5oQlZQal/G4rghmOP+rAwwd+h9R9zPU8wB1d0Ly
qLMNtVRC22BzDfC3vhDVFYAX3F6AnjVAIunz3xnlz96j6iKkFKIIezCV49xI
qIxnUoKTQI5fNkagJ+mkXa421N+8Qp3d6HE1lFB+q79vH6EXnZ9f1qHPf4lr
fYCqkmoZEkUgmT9WWyQmLWexGhIfQos0m3XI9QfY4SVmEppzCY05MJNZY7Z6
jv9o8sHo3vys5lCypUjvqySRKns7Rs1T/a+qBwZ9Vb/xhZX66paYfmo/+suQ
NeIr/uqqxxbjD5rOSQNLv8uDEsKWpgcbiMI2YNFU+bwYqlpobEgLQkCXga0h
RhjyIIDqR0moIQl4Vi3EFvCSMCshxTo1xBSDH7yec2+Vq/9Ku6vz5lxbMcnx
u1GXV5FYO8YRGoEnuW2Y8vuoXfe2+KVT/DOo9/ISAgqTb+dFeElpsWV52Y/a
cjvrcjpq4x7lMeoFgSXxvtncK9Lgi+m3tyc7bgw/YcDat4L6mwHtoAHJXwxD
5j4j1oEN9D1rQn9ZELxz7r3tc6+ZTLuybrTt4sHHZ+vtmaLz20SYnPPjKNh8
tGUwYToQhm/08leTLJ7sA/juG/5+Kd741n7WIL9rp2oQ84jvdk539DnuR3OU
iZNqynM+PHr9+cn7z+/ef3r7ruX165KOjtS6Cookwykj+UJizOX4UKck6p20
CIoskZuXHlsuhSE59SWyxiJ5U3F5S1V1e21DV3M9pnBnSw3wt6G8tVY1eTKz
vkxYU8LNT6VlxfqlRN6I5zjF0O0jKXZR7IvRXIeYuCsJiVhksdS6JuS6Jea5
x+W4xcIiUccEpVNiNj67RhdcicoN5opCeOLE6OTYyISntbUwj/0/Hp8Q2BXP
X8P2sY5u1JgPa39b61FTNWosRw1lZAi6CD2ohZFTn/6uCxhbJtUFSJGOIs6i
FOde5f3i/OJzsjtKdH3XTEfP40mdVQfKsJPeUNk7pfZbccckffn40+PSv1Y7
Y/P7eRsqzUUZCTDcA3u+KuXNvIFEXjDxQ+wLk111p8NIHO0FhOZsos8c6NOH
8TUTQHOBkqOhzwimZ4zoLcuDyqgBahp+wZCvIsn91bKro9bi/l8lI7XVfq6G
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
O4Q4qN8lMurSJsZ8iIy5UM5aJGcuULAWNkG3Zbg30D2lUL8sZ1mRa1OhG3Rh
GbRXxjwFHQbS3i1Q9fR5rfQFzTRvGRP+xsVNTE8Fw0POmAepYrhVEO0DcA47
0kxNU23mRBmPj3IcH+k4OdppaqyLfvQCnQivFbhN/pRf9tD2p9VnpDXmZDVh
s4+yMjoYSW24GEVuQF1opCIut4VFPcEjniqjneemnmTEdZJ+k8SvrQhwZm2w
p61R6deOvh7B3GjP2mSrxJrsNxe7fEbWwrFxzmNCrAbvh/6rg9k6HR0++0/F
+I5Hw3NU+nWH+h2CcVFeAdto/L65bJbaf/+lclL1SQnfPHOQ+QKjLcHrcmi5
HAn3zrXrr58++/j66ec3z5+/f/v49Yvjj+9Jzp0iHq9NlLB28Yt28Fh7K8kH
q+nRtbzYekF+U1V+UzW2pZzYwSU0i8jtdeVdteyuOkG3THy6RdrT0nimpbbn
uOTMycYLPQ3nTvF7Osq7FbSjEkp7bVYzL03GTqwviq+FFsyPEldHilqixK1x
wo6oypZQbnMotymUpwirVIRWyiExgqZoQVNGVVtuTadI0NRQ29Epq398/fK3
l33/afOC6oHOmb+g5qPPr8HXt2jAMnr+b78X/inPesGVi0DG/FiaCvgwco5D
zwIYOWeg/b9o7WABWi7WRQHdTHCiEJwuR+Z7hou4VA0uCT8/6Qbfbvzh2377
Dp69Brel4J4cDbJ7fQFdNn3vRW3I7x+ihqmrx8ARBjjCBE3pSjJASxZoTlMC
U+AcZL4wZkaLwyYrP75nqzfI6iqTX9UR9Bh1hZVKv2PVnQWqFyPU/UQj/lmh
//5QDu6YpYfRNjBZOH99UMDWg4eCk1MCk1LDMrJjMgnx2SRcBhafiePk7KzC
7ZeSFzdSflLd2yqoi5sZS6WMRY3Mn+RF86VMrwaGJ0TKspcVOTUznVsKXWCG
C1HQPJvoXtBqZXTPNppXC9VT5cg/smOaJ4TNdCwkWe3Ndfol2dIk2WFWuOmE
SEfI9BhniHasp278POfEFQty1vvmLg0RHYwRRSQ3xCd0kKOasIENyburIpcX
bvFn/xZbTSJ1VUNHJvaUZ55kZZxgHpBmbOGGO9BWQaB+IVaMdRCVci0ZCAuy
jzF26ews73ExduOCLYftg/mvNjp/Xqec/LxqAmbJKKTfeYPR5lAUPw/H2A5C
zQv9xc/9k9tH/7N+Vcf8JugH67Ji7m9ha/CFpMqGqid3H7558uLju1eQex/f
Xnv1VHH3Jru7M62z7KAga2UJCbKmOHdtSd4mNn0rt3BfJWs/v/CwMCukLj9G
UJRSx8lRECA4RTHtKJd3RFB5tKqkoxnCPX6Cd+Ik+1hrWWcz/WgNtUOU08TL
klekNrASxNQwQUV4FSekui0UFU92wCw4vLItjNcSxmsK4SoCuY2H2fVRHEU0
tym9sj1P3F0tkNXXtZ9olj65cQkVU/1HAQLVsdB78KkPTYP8+Ah8e6Z8/m+/
H50yXQFXuoCIjFBlvlVxKPmVFKAb4TYyOEJHMzGOsdAWFcjxUpT8nqwAJ9jg
Mh8Z8asL4OvtP3zbL1/Bs2fgthjcrwMPe8DzS+DDHfDtEfj6AI26ghH1zTZw
vAm0S4A8BdGUAppTkYohcujFBWhxp+ZsdHn0o855plK8s5WZrw4SqcZE9dny
JHVZzyh1Vjtcfec75I8Z7l+TLo2/+yKKqAcNHjRuhoGWge0sDz+TZVsX7dr3
c1zSvui48IzssPS8qBxcfA4hIYeATc+BVGYHlKXuqyMsaaSukNMXokYkCH1B
I90LOiyMmRsYrspnFynTpZHl1sxwaWG6NtK80BtonnI6CpUbaR7NVK8mqqeM
7i6jezQxnBV0JwXdXU5z49CcivHWh3PddyTbGqc6z4o0nxjhANGKctSKdJwV
664d72GRuMAhc4Vn1vxVNP+VpFUbijasZges4wb7cQ4uL97tRl/vydr0Cyv4
AC8urR2X001N6GDEtlJ3NSaurjjoQFsNsaGts6ausVIdRMMsuHALlLAVY4MZ
xd8Qt1I3y2tSjM3okLmDD+hp/qaF2Tr5R/EG1O+yMcr8dwgqnoTxs+MojN1w
jPUQjKUmxlgTo6vxY4pnfzbzt/pVTX42RCG0yyqjg0mbqMXEuibx8wf3+54/
/9T39uvHvief+m4875XcuFl67HiggvYzL+OnYtziooLFRWkLC1OWM3NXFRWs
Kc5fV4rdxImHbCnO3sDM2FWWtLs8ZX9FangNNoWHzxJSU+qKMqRl6Y0lWYry
fIUA21ydJ+dkNZSlNJQnSYpja+iRVeRgLhtymCcL5CtgqBwhaIngt4dXtobz
kAsHchoD2NJQdmN4hTy5oiWzqrOOK1WI2rqaK57e7f7++j8Mjfz2DW337nsK
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
mQTjpEjtE7G4HT6zVD2x8x3lZzoaQGY7GMxzMtJzWWzovuwA4eyhpPOOGf74
oqz0qpzMmrz8Zga1jUNtp5LbKCU91bWDTc13etru9dU+vSa4VpPWyQ0pz1ic
u3k1fYdm7i5s1nat9M0QbeI2jfStKsT9SumWmskHtVIP4RK2q8RsnhO2cKqf
roydzriL6mh43aHf9aux+7/rJ6Hi8woZzJIJKPn9S79/Ta6b9rc16f/Pa+qo
RytiZDbPueBxKYAQwmRkt7ZUv3l278u752OdV11f3pXfHwxtq3SrFFiKsjeS
Yg/nJBwjJbvTM/x4eQlFlLQKZs7lkszaouwqaXIhV9pVDinori7qqa3uvVLT
11Tbf6W6t76sq768u0HYW81oKwqo5ThJc5bTknEJAVpRbpqRrkvDfFfHBO/G
xx1MST6VmXcmm2SdKbDNFVvnsy/msS6QRDb0QgdmqSOr3INT48WtjWNWJXDq
RBwJpLOY8+3etS9P3/+P3iuo37f3wMNe5J6DXeDuVXSQ9PQmeDKArgf+fIhG
S438rxNkMHr5t+8aKC8D3EzASoP6HaZ7faO7DnM8v3BDfggjhkVxQEoAEuik
cUiAAv+xWTpAGA0kcVe5Pp87c8GPOwA8/893vnyHpnlcaQS8GCCKRyVliNAH
7RSGUoWR89h+4bGZAOIxCXuhcFoUiGraUNdin8/iCAiaHDvur/HO88dNUpo8
U01OUX+e4drFO06sOuRwzItgj89PktQniOsySluySpuzylqyy6/kVDSRqptz
Kxrzy+pyiqrShWV4ujCZwYzNzfNJTnaJjbX38Dxv72i+64DZjn1mW3esWb1x
xUZT05X6JkvUDU1VDAwV9QwUDPQX6GrP0dKC+p2G1ZCFITRWSw6rOUNDQxah
Nh2rPHW+/NTZcydpTBu3AIM5rj/d29wg3m56mptcrrciJUCNFqRCD1ZlBany
wnD8KD1hjIEwRk8Uqy+OMxTFGYrjjIUxRnz8QkSCriBRl0vQ5SXo8RJ1IcJ4
QyHBSJAAY2wjXoIhJ95gzH/PReoe9FHU8MIqOclPc9Ka4aIj56Izy0VX3n2h
kteSDeF7t+EPn0u1C5LEREuSksuzMy5Tshro6Q2pCdUJ3E6RpK+4pL+y8mZt
yb0W3rXK1HZWRGXmXsH5XdwzGhk7NDN3amds1UzfokU0x6WbYTP2q6Xv00rZ
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
KsvCyFJiuwurDzR3nN3fc+sY4OTtS2fvX5vU77WXtwBXn9++9uLOlV/vgqD6
lwfXT9+90nTthOhkd8LBJnKbOKK5aGtBnFmivxZ19xwqYSGTvJtb7FFQAfLf
kPLqyLJWjLA9UtSIlTTHyNqJVR3E6rZoaRNe0ogR1RPL68nChvKSGqmwSVYq
uXfl9tsnV7//fu/fdAfLi3o/DsKvX8EvX8BP78DP7yF3APA+8Pz6LvwRROBv
gJz+7U1+H0MOTp8+BDdnwLJ4WIaHpbjJ1eYJCQEAvgTOOyAKGZaGwZVBgAkZ
Ea4BmSwZhL7PmqnwbfHXd6/+8J6fvsBXDsPHWpGRwU0JPzrttPykgfJjAtpk
l/gGNjLuAcTSLST5oEPW5Prz+564N52sg8fyO3oySlraChubE4pLaFwuNZUX
zcmIYsZH0GPDaLHBJIZnNNYDj3EnYHZiw3dGBW+PCPQIDd4TErQnLGRPWPDu
sBC38NBdUeFuuKi92CBPXLB7pJ97hO/OMH+g320Bnlv89mzZu2fznt2uu7as
2r5h2frlyOLVsumOLmh7J5D5mluYQ/r6kJaOgrompKGOZL4qqpAyyH9VIIW/
y+OctKCl1ko0byg+SCkbP4VH1OST1fOpGgW0KcUsrRKmRVmsZUWskZhtKmJb
iTjAf+0AlUkO1alO9VkONSD/TXWQpTlI02wlqTZS4MLp9jVpCFVycjPRKYnG
O5KMV5FVjTBWuqGmqmF2UyLs1SNsNKPsFLG2ihGWczDrffIJOBGNVpeQ3pmf
3VvE7SsQHC4tPisqPy+tv9TcfX9f2+2+vsdHm58fld3tKbjUwN5XvLaHYS3Y
Y1uwCc1bj+ZuQnM3WnO32eXtnCrY7lCw3b5wizV/gyVvjXHGUoOERWq0mRr4
qSoR1spBaMjbFHKzgLYZQ5u0oHVqiH7n/dTv1B9HIpHiBWN58cJf9asgb4dl
Jk+TnbVVF5kTY+lpeTmHDvX++vTBl68fBwa+9Y8MfR38fvrLp64nj6jnmkL6
ylZLs1cI09cI0zZV5YTWpcV05Rf1VstOdvTd6eu723f83uXTD69ffHzj0pOb
F369efHXWxee3Ljw5Pr5hzfPPbh+6u7V47cuNd84VfnLft6J1oQeKblFFCLm
rS/krOIx3bmJ7twEvxKBf1lRhKg2UlyHq+jECzuxFa14YMSSDkJlF0HWjpe2
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
zVijl7hUkzlLKcZBMcoJCrFV9kQpuJsq7TBR3GoIuepDK7WguWqI/zr93Pz9
q//+6dJTghx0lWbray9DbcKtCcsIqOvoPX3lxsuXv3/69K1/cHBgcOje8JeT
Lx5wb9+gHzvs2lblUsF3Lkl3LEq1L2TbFMRZ5VMs+CRjHs2YSzXmEY15MSZ5
VGM+xZTPNObSUTlMVDbThBsDMM0im2VRdLPp+rlMo0y6YTrVLIVskkQySSIY
J0WbJGJMk7DTOLQ5qfFbM/h7+CW+JVL/MllIWWNwWUNAWXNAeXNoaX1ISV1k
UT0grLgWwBY0JJW0NJTV1hRV3j594svTx0Nf3sET/9y5bngUOXn14QXivJOZ
7+sn8Ntf4TcP4Nf34d9uI8VHb+4ijaD73//b8LJHD5CxgwckA9K0UQlhRIQf
kOt3RBw2IgobFmFHxLhvDTEfZFHwKfHw8fKJc+3wlR74fCt8rHr8kAA+WACf
LYDPF02crYYvN8EXuuEjtRN9AmTa4GTOWx8L1zKRbaPaya4dZGQJukbewbIu
GmmiVYufqKVO1NEm6sCdOlJLGKqJflVHBBI+0pZyqDmxsKtU0FkMzBfoN5jM
CaEk+tDivalx/nQawI9G96XSAsgMfxI9jEQDhBLpQdEU4NSeZBqyNI2N3Bsa
7hYUvMrXc9oGV/RC9Iy1012WODvMQs+a6Txj2lRHl2lOs6Y7zXWeNm/atPn2
TvPs7GegbZxRaHuUpa052k4XZa0F9GtqoWNgpa1roW5oBukbQyD/1dVWVNOE
VP5Ov2htaKED5L8ESvI3SAqGsjCqudEQLwbKI00poKgXU3UKiOolTC1ABcsA
UBarBwBGDCwYBH1lHMsqtmk1x2zyXgmMmGMt4UwDVCTYl3PsEpLsaAyzrQzb
5VEG6iFWKgHmikHGAOUQM9VwC6Qhc6CJS8zajVl+G1OC3fnRQQIKTsROaUrM
7swo2C+uOFEnOVNf+UuT6Fx95aXm4quNpTeaMSe4bs2MGUVh0wQhVtmbLLM2
WmdvAljwN6DyNpnkrQMZsTl3qVnuYtO01XqcJTpMZ1WijVKUPRRsqeJphkz+
3WEAbdGBVutAy9SQzd9ZcvFO/Tl5YVK/k+ev/qpfE1VomoXqfFOLzTPdSNsi
04Or+o4duHzn1cvnnz8i+79Awxe/vTr4/Bb/+kXWod6lrcXTJRl2ZWk2JSnW
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
NGxUHDxcEQ4Yq8CNC/EjFSRYQr9ZGwrfFgwCr4ffIhOXhkaQoUtPn8GXz8En
Do/W58DthRN9ud9bUyZO1MDnW+ArdfAvUrirDu6sRfJfADBcpC0e0j4aKSiW
kcerowFwDXNMRhupogxJiYPV/+FZIwXQ2ZLU0ZyY11LKay7xYiT4sJJ8WYl+
sUn+sXQ/Fj2IwQxiMDxZ1L0MsheF6Ulm+JFI/gAqQjAF64UN9sJEbNjrvnrz
ohUb5i9fsWTe/Nkui+e5LJnnsmw+YN7KpQvXrFzounzR2uUL1yyat3L+ouWz
5ix0mjHHwcnFxmmGhZ2jsY2NPrKLZKVpiVI3BPGzmbqWkaamoYa2PqJfZaBf
tb9ZTUWpQ07GCh7LFaL3GMUFKKRjtLg45TzClPwYrQKiVh5ZI5+qWUjVKqLr
lNB1imnaArpxEQs4r0UJy6I81koYhxbHoaTxVqJ4CzHIghOMZRxjMdtGwrEV
c6xF8VZpCcYJTN2tNKOVUVN0Qqym+Jog+vVHqQRaAdRDHHUiptviV9hFr/TI
iQ8pzcILY8mVCYnNGZk9/IJDleUnGyRnamXnGiovt8qutpdfaRacq+WcKCB0
JS8Rb3IpXAl0is7dYMxba8RzNeCvN8zbAMzXPG+DFW+DRbaraepq/YSlJpRZ
2jhHtTBbxQALRU8U5G4K7TBEOge5akBLFZHOz9N+zvy1+jm2bPL8hsZfFp+B
nB2VoQX6ultmWvuuCMFTU3nF9XUt167efvPh/ccvXz4PDnwbHT498Knt6f2U
2xcwhzrm1mVPkyQ7FGfbCTIn/deigGGWRzXLB85LArIFWrbiUQCo3BgUl2iW
SzfNoZnkEE1zSfq5IMamaeUyAAbZLP0spmEGgnEmxSidbJlEQ6fQF2TEL8lJ
dBNU+5Q3BYvaImTdeFkHTtqGFbUDwoB4pV2RkhYAUdJKrmzPE7Xki9tEedVn
9l26e/3Cu5dPBpHOk//csbn/O/zpI/z6MbLh+/wR/PIx/OIp/PIZMjzl2V34
/kX41pnRi90DZ9s+XW8fvL9v9NMtePTpn1tpfRsG2h8+vB/eX/MiizYkjRgQ
hw0KQ4ZEoaMVUaNCTH8l6VM57kkfe/yueOTd78h5kokJRMIjo/CTV/D1U/DR
jvGmArit5F13ytCJfPhqMzKE9EEPfKcDPt0BH26A23kTtSlwPRWuJcPVBETF
IGauJk5Ukcdl5AkQMMuoo9WEYRl+sCZ6sDr6ew3hW1X000barw3U3vbU7tbk
4i5JQZvQPzYBEMxC8GPSA2OZAax4P0YsMGKAF4UOsl0vMt6XSgigIISRo9xD
vNzCg1bs2rbMddqC5fZzl85bsHzh3GVLFqxcPg+odc2ihWvWLF67duna9cvW
bViydun8lQsWrHCeucBm2lwHp9l2TjMs7RxNbW1MbaxNbC010eZqBlb6eha6
miYaGkbq2gaIfpU05W6i8uc/SCtVyE4TcndVwHqbJfgpZEdq8TBKfBxiwZMU
UJBaYBBIlzF0Csnq+TSTQpaFgIEqZFqWsGzLYu3KWXbCWAchCy2Ot61MMJFy
jEVsRMuSBCvwkJFgkMjUdKfobYhQ0gtFqfkaQj6IfqcEoAG6QS7GEfOtyWtm
JuxwT40LK8zBi9ikyuTE5pzs3iL+odKSU5XCk7XSsw3SCy3VVzsrrjQW/lKV
ebCA05k5t2yWS9EMa+46qxxXw/zVAP289QCTvA0AC+5a0+zV5qkrjRKXmlFn
6eKmqoahFYPMIU9jyE0PaT65WQ1aMwXpfDVHEdGv/X/NHDSWH56c1O9fr1nK
0GIt3c2zrH1WYfCYHG5OfVPV9VuX3n1+++Hrh29D/UPjw0eHf69/fi357tnQ
/XVL27jTpRy74ixrQcZk/mtWwDLJo5sJiCALRmyXS0Rnk225VHQOHoDKYVpk
MyYB6bB+Dl07m6GTwzTMYQP0suJ0M2ONMhmGGXTrlFib1LiFWezl/JQ9grIA
UVW4pA1X00OoBvptwYqAhNvCxR2Rld2YyhYAtaqNXtNRIG0DlHGrzx668ejW
hY+/PRoe/NfOk8AEP3+VLzg/h9/KN27efIBfv0eKB18+Rfpp3LkE3zo8dLH7
67V2wNDHK/DIwz+/4Yd++NFF+HQ3vL/gbT7uqzTqizgCOXwlDpp04c+1xCdF
ga/PFo/cqx//7zOS4GPg4Tv41lH4YDXcWga41xE7dksMP+qEn/TAv52EX55A
Bvv+0gzvE41XZSI7vLVUZNkKJL/1IPklTFQyxqUg7aWOyShjNZiR6qjBGuxA
FeZzDe6jDPOkgf64nnqgM6O3LaViX21Rp9Q/Ptk/PiUkLjWIlRzEjAukswJo
HH8qW76ERfUhU31IVH8S1hMX5huN88JEeoWFbnRz2+ixc9H61QtXzQfMXbls
/uoVS9ftWrJ2x5Itaxdtdl2+ed2yTWtXbNi4fP2GRa4rFqxaNn/FDJeFDs5z
nZzmOE6dZWs7zdLW3hxtC/SrizbXNrI0MLTQ1zHT0DZR1zRUVNeDVLUgRTVI
4S/6tVSBZhhN2b1QIWaPaUqoQkakKheryMMpcYlqPKI6j6SZR9HOp2gXUHVL
aLpFFJ0CqoWAhsqnowRMdHEsujTepjzeuiLepiIWqNVGnIgScszLE6zKOVbC
BPMKtml2ol4yU207VXd1pJJ2sKmqr96kfpUD0SpB1noBThZRc+3I6+ckuvtn
xxLKsxlSdmxVUkpLAX+/uOCQsPS4rOJUTdlxmfiXpsoLreUXagSnxcwDOZSe
9FnFa2YWrkLz1ljlrjbjrwKY8FxN+a7G/PUm/A2m3PVGOa4mKSv1E5YYUl00
8VOVQ9AK/uYKew0hN11omza0UR1arSaPnxWQzV+7n23bUT87xxr8w+RBRxXF
hYb6m+bYeK4OZQbH8VnN7aL7jy+8/fj6S/+ngdHBwbHBM6NfW188YF8/F9LX
Or+W6yJJtyvNsClOty+KtxXEmguYpvk04wKKUT7ZhA8CZjKwXUseCZ2DA1jm
0lC5VNNcmmkO1SCHYZDL1M5iaGWC+Jmhl8nQywAwDYALZ7KAeO3S4hdmJizn
pXsLpCHChigQOcu6ois78JK2KGFrZEVzWEUL0jBW0oyVNtOkrYyqDr64LV/a
IS0RnT588tH1699+fz0y/M+TQ4F8BoeR6bpvXyDnJ988RPpcvX2F8OYFshH8
+BbS0urhhbF7vww/Pj3869mxr4/gsd//6L9j8MdP8MPr48d7h5uzP5Uxv4ux
30WYQaH/kDhgSBg2Io54U095JsW9vlQ7/vLIH9bCvw/BD17BV/vgfZKhunS4
lXu3hTB+sxB+eRJ+/Qv86T784S789Cp89Sh8oGFUykP2f2vocDUFqHiiFgTP
JFhGn6ikTcjIY1LiaHX4SHXYcDVuUIb9Wo0DPGyi3G8kd3fy2lqzBT113PZK
P3aaPycjJD4rkJUWxkxANnlJCQBkw5dC8yOSAcFE4Lk+XhGRuwODtnkELHXd
tmz9yjlL581etmKR67q5rmvnrV3nuj1i+cagle47lu3a5rprw4ptrqs3b16+
fv2C1asB85a7uCx0cpo73XHONPs5jtYzbG0dLSztjG0sDa3M9Y0tDAD65up6
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
nH71aPLF/cnn9yae3Vl4eGf23i3+X2emb59+//Dw2PDp8c+v5ia/LPzvEIA5
xH8F75+8XLh549OJ41NN7PdFfm9LPd+Veb2s8h2u9n9bF/a+IeJuO/fdkbx3
tw/MvbsAjy/XMz+Dn/8Nn+yCu8un+1L4/alTQxmCwzmCw0Xzx0r5RypnjlYK
DufPHikYPVEt+L1l/PK+hTvHFx+fBcB3zsLXfgH/dn5/zUxLkqA1eaY1it8c
Od3CnGyiTzeHAr61hH9tDrvVRb/WGtLWwa1vZCa1VMU3VoR2tAe1tnqzoz1Y
LA9W1DLAdt3pLA9G5PJ/AvNF9Mtk2UfQrUIZFsERjn6h9j5Bjl7+bv4h9kHe
1n4eNj6eAAdPLysXF5D8IuZra29gbatvabzLVH+LueZ6480b9dcD/a7etE59
/WqlVasAimukqCuElZVFlZREaDIkGVmyDA1No6CkseKSKBFkeM6/nT+Dh6wM
xn09FKGPSXQXTvESSw0UTQsSy/RH5QRh8sMkCsKlihnY8kgiUmUQRSyNlirn
SBeypQAlbAIA/LAsmlTKpRWzKYiEoynAdoH55sWQc7mkBDY2KkLcLFxK30+I
6EWQcpAUQvJQIhLNulAhDxrSU+AnKxaoSGTpkKP0yAlrCXGrKVHrcHR1kXAN
McZqCfpqVOR6FGeLNHerRMoGgHjaLol0HXTGTpAC43P0kVPoHF1y3m6pAj0A
vmQHumAbKmeLRMZGfMwaVJSakL8yMjTPEQfZYyBjCUhPGNKFoO0QMvZ59Y+x
V+Ql2S4rF/Njcvv/+bikluYNqUBChignj4CsgvKefc037l4Y/fZVMD01sTD5
bWbk5uTU0SdPcq6dC9nbodGYp1abLc8rlCnPk+MlylclyVYnyNUkytWk0ypT
QPxMLeLI5HIBwHkBP14zCXmMZeeVyYklZUQD55VMpkskclCpsfikGHJqPICa
nqSVmKafkWtZ0OpU0edZ1eta0elZ0uNW2OlZ0OyWW++WVwrwK24Mq+qk8zrZ
DQMFdb1lLfub27ub2rqunNs//Pjiq9d8/gz80/NnAQyPz89/fT3z8fnM+yeT
rx9OvXo4OXwffnRv7u5N/s1jU9ePPL/Z9O3F/m/vb8yMPZpDBt/8v/eaBa/5
06/v3pn789rHkyc/V/h+qUT0C3hR6vWyzOdtZeDH6tCrdWGvDmZ8vHlwbvg8
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
yipiV8iSlagEChWHJ6AkiRLieFFJlISohOi/5r9ovJCBEmS2EuL6Qyl0iexw
MUBOsER+qFR2GDonHJMXjilmEgpZ1AIGOTualsOWKeQQCti45b5g4MJlXOny
GAxi0JGyJdHyeVy5wjjFglhaLpcSGkvzZWF1QvAb3UUxjkQJawwyfsoeDzlS
kIIKh/WALVFOBmmBy5uPPEsZ9OakiO5I7/qA4BouozmJ0xwb35HE7Gf9f3Wd
B1CTaRuuQwuQkIRexIJd17qsDRVBRFR6B+kdAumh9/RCCzV0UCkW7KKoq67r
2isKKKI0RXonhJ7zfrCes/+//2GuyXyDmXEm5vZ+nvd9SuKdpOBrZKcyL70i
O7V0Uy22iSbrsDbLSItpCFxYg3UAPOuwjYERAztWpu9AJm5BRm6UI62GJte5
aEDBs6kUVPYM7TxCwrbJQ4fPa/9x86v2c3IO6v8z+VllMdhWg/3qst0fRxCW
n7n97Hrj97eDI33iGVGfZGpAMnOt90fB21cnH13cnk/fms9en5mknZWgnhGr
lh4OTbtKT9RIS1iWFgscGViwWkrk36fNi/pFskMRLKwckwBnERUZJHk6UT6R
DE8gKcaHK8RRlWIiAEC/yJgwzSiCdjTpQHSiGYN/gldol3naNasSpMDeaRW+
GdU+KadcGQXOzMxFsk9y83w4QkA8L5+eXsrhpFy/fuvls4bPH7/9GJKMiP93
+xFUi9E3sfB9CBjuRPP7yYY3og+vx5pejH98OdvwcPT5LdGjS6MPLjQ+rBr6
fP97z6uh8aapGSiVXoCakeYXD6AlUz1dvc1NEw+uNJ3KGimgv4n2+Zph9yXd
tjPDtjXVsi3drjPL8XTM7r6HCW2fzk+PPZrrbQVI2r9J3tRLaiv7S9LGrqdM
3Ewbu1U0Xlc8f7dsuq5orvbM1NWy6St5czcKRuuKZ/6sEr27MNt0df7jPYDk
1U2o5+ha0VxN7kIxc1qYPFSA68vFguR3OC9gsCi4Nz+gc1G/v5c6/1XtlX2K
kVoYTyjKB3gXnvErrvSJiPGkRHpRoz3IkT7kKC9SpBeB6omnOJJwADsCwRaH
swoNsQwNsQnCWvkHmfv6Wvj62Xp5A8w8PU94+5h6A//1O+LudMTN6bij1TEH
S7MT1iZHzQ2PmhwwNd5vcnD3ob07Dfdt3LVj885NG7av37xp9bq1K9YA/12l
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
roYPVTDxU97nCld10FCyUpayVZG2A/nvMpijLsZ+yzKvPWYkC8fEk6RyJiCx
nE2v4NPOpbFqBPSLeczLQtZlAfuKIPlyFuNqbsLdNPIVOv4K3aucsk7or53i
rME6qsY4os47qMI2UOEewrAOKrP3o5n7VBMPomMNlKLWS4ctg/uCvwsNO46B
HVWCGclC+t0l8/f51dqfDQua/ziCRi2eX/3Xj9yiTW+WBga9xWVPPD2k+mLW
ww/3O8fbBiZF43MzHQvjn0R95zrfZL64eaz21NZC9oa8hLU5sdoZCRqpsZqZ
scB/VQVxKhmxGpmJqmmxmJRwFA9IOATNDVHjhqlyQlVYkSg6RS6ZosgEQo5E
0iMUk8IVEqjoGDIqhqQUFY6IIMtF4mQjwpQiyMoxETuiefvpOWb807Y5F7zz
z/sV1QQVXvQVngvMqPZPq/RPO+WbWuaaVnIyvSQ4oyQsq5yTIkwVFGfnJNTd
Pv321dOOtuaekd5paLnvvywYOOjU3Pz42MxA/8y3VnFHi7jjw0Tb+6nW+vHP
r2bqn449fzD0+OrIs+td737v+fDgR2/D6ETb1Nz0zPzctGRuagFIVzwzOzX1
taXnzcvZm+f6K4U9GeFfGNg2vnN7iktHqk0736o1xfmbwP0sy7z/efpw6/2Z
nueS7i+znZ8kzU2iutrJ+9Wjt8+In1+fe103V1+70HBL8vze7L0rUzdLxbUl
UzfyZm7li24XTd8vHX1ydubd1YWGR3P1DyXPr8w9Oj93hT1/njZdQhEVEETC
IFFe4FhO8Eh24I+cgO7cwOY8v5b8wKtlhEvFOMGZ7NRyQXhFSURVWVjFTVzV
LXdqghsl3iUiCmAfRbaLJFmSqMdwRAdcGFRCicfahAYdDw07hg11CCLZBuDt
vXG2HqEn3H3MPXyPeHkf9vA46OJ16KSPiZMtwNjawtDiuNExy/1Hju8+YrLL
5PAm04PrD+/bdHD7ur3Q8oX1Ozat3bBKb62u3kptoN9lq9Q0dKHiK8BqDbnl
ylLSGgowlcXDZ2h5yv8wYEU5Was1sOCDcKIDLN5HLtodxsZKM7FwWqBMfKgc
gI6TYuCllyZipRKUUvDIFDwGkI5XBqSSMdCOBqioA7GUBQtIKhlEjICoC4ig
quDDFM190YaOUmr2mihLZSkbdWlbDZj9KpiDnrzzNjnHLWaBLs4RwXGX0vHl
ybQSJrcihX1ewLmQyarJZJzPSD7LTarmJJxNTblZSL/PSrpLJ1+mBVdEbs2P
XMkP0WIf12Qd0+LuBahxDioz96uy9AEqibvRcfoY6nbZkHVwX22YMwpmhoSZ
yMMOScEMYDB9aejyaGnyhs6icjV/XgFjFkH+62OSX7TpX6D373DZnsQLO12T
fu/d046JgYHJ4bE50af5kfrJ3ur2x+lPaw5fS9E/E786N3xlNkUrJUY7NW5p
2rNKFh2dkaSaEa+cFoPkRgCUOFiAMhsPwYhCJVMVk6OUGLEoZhyCHqOYEAWA
R5MAyGgKPBwPDycC0OFUleioX+NSDdn5h/lnLHMvehdd8Cu9FFx62a/wQlDO
Gf/MMv/MCoBHZiUgLPsUIfdMWnpxhqAkOzPt3t1bH18962v73CdqF0sGZxZr
Leb/6+52Ynp2ZGRqYHC668tEx8fxzvrRjndT7fXjX17Nfngx/vLPoedXRl5d
62p41Nv8bGCgXiT6PDU7A5hYmB6fn1rqhp78+rHn7fP5m6U/ytjdGbTGRGIL
37U11e1bqnUHzwI8/8jxOy049PVVjKhrcaTkj89znU2ST/WDV86PPKrsu1cm
+fRC8vG55MtfktbHkndPJI9ui2vLJm+UTt7IE98UjtXmT94uGn5UNvmiau7d
o+nXf0ieXJ16cH66CjtTHbp05zuR6wMYzw4EdOUFAJqEvs0FATXl1AtllKyz
uamnMyjnTgFwVTfx1bdcSDFu1HhXavTJ8BibiEjr8AgLcvhxPNmBQLDD42yJ
eBsCzhwfdgIfahtCsgoiWPriLHzCzDwCAcYebsbuJw+f9AAcc7Qzc7A5YmNu
ZGF22PyEodlRAzOTvabGm00PbDTZt/ngjnV7tmz89Ze12zas2bxi1YZlequ1
9fS0Vuqp6+hioBUMy9DLNRE6avLymvJSGGkpeRkpuPTiAMr/sGCgaRUZ+WPr
YJ77ZSgOsAQvmWhPBCMEQw9GJAcq0LAKScHw5BBZRpg8FweRCqJoAiaFgAYA
LwakkJRBFsynYngg/w1X5YerZIDgmaSaQtHhk7QiSCq4YIUTPuj9dlIq1loo
czU5a21ZKy2Y7XJph1Vw17UKbuuPBFu6JfqHn2ESShOTS3icCgHrfBa7Jpt1
OZt5MZN5KY1ek0q/lJF6q4B+PzX5d370DQ62Mlq/zEeXc0KHeVSbYarBMgAA
8QJQDH00U18t8VfluO1q1M3ywSsUvUGujYAdR8KOwGGGUtDlkb4UZL6bYX8X
P2v91K/az/qr/9KvzKKodSC/lt+g/NvJg0nskMqL6fffPWof6xoE+p2daF4Y
fzXadar9L+ajsweupa0rjlyRHbcsM0YrJRpIWCs9CqCanqiSlqCWmqjCj8cA
8bIpKDYegFmCHo6mURCMCCQjQokRqUijKiSS4fEkmVg8AB6Dl4kMVQonIqlE
dWq4dnS0fgLXkJN9Iu2UXd45n8LzfsUX/Ysv+eSfD8it9AMSzq4OyDkbkHPO
P+ccLvs0Ka9SkF6cm32qMDPnyf2Hja9f/Pj6uX/im2huULwAHTYvdu5BKoaE
PLMwPTY5Pdgz0fNN1PFxtPXD6Jc3Iy1vxlpejzS/nK5/NPjkVvezi+1/Vnc1
PutreT3Q3zI+1iGaE0/OT00uzIjmp6cmRaLx0anm5oHXr+euFfaUsju4oV+Y
ga0c1zaO6zeOXSfb9ivfrTvb/84p+/ZnMeLvjVNdTZLvHxfa3kve1w9fu9b7
pKrjfsl8W+Picpb3km/1ksanklf3Z++WQyH09TzxDeHQTeH43aLRJ2cmnldN
v7k3+fLuwtOr039emDnPEFUkTJSQhvPDxvN9xvK8hvP8AV1C/+95fk1C/+aC
oEvlEYDM6ty0M1nhNdWks2dCq2+Hnb1jjw8/GR53khzjRom1oMaaU2LMyRHH
CVQHEsmOSLQmkW3IFAtSKMASSzIPJpj54wBHPLEmHiGGJ51A2mvm5mbq6mrp
YHfC1trM5sRhC1MTy6NGx00MT5gYHD30i6nB5iP7fjmwc91uSL96v6zV26K7
crOO3lotwGo9jRW6ykC/6tpKmlpoDU0UUhMujYJJwYF+ZRYXmP1HDz/UEiel
aLweZr8PFm4PS3CHRXmpJwcvTwpEAdghSJo/yIXhdCySG6YISMGB+FkNBNLQ
XgYgUpLqUl8Si6oGYIdrciO00ojqIE0GzwySWjheJdQPfswbvccKhjHXRh3X
VLRaDjfXhlnryNivlD2pjfRZZYQ19uR44fNjiUXxScVp7DM5zPM5rJpc1tUc
5uVszvUs1lUBeE2tE9LvZdF+z0ysSwutjN1Xaa7N3KxLN9GhGavS9gNQtL1A
vwq0XxXp+uoJW1XiNmtR1yKCNJGeKjB7eZg5AmYqC1Ve7YX9vfNo08/JVzo/
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
jriYPJobNiL0GshxG8n2Gsry7M7x6cry+rMQ+0AYlF0Wm1EYSSrJIhZlhpZV
YUurfEuv+5RcLbz4AJB7uiqtsDS++lzk6TOM1FMxjHxvGsOGTAlISDfxwFl5
ejgHBdqEhFkFYa39go97+B709Tzg7WHm7nrY2dHYyR5wwt4JcNja1sjS2vi4
zcGjlkamxvuNDv52cP+2vbt++W335l93rf9ly8q161atXrlm/Zp1y9XWAPEu
znxGaigh1JEYZXkA0C8SIYWUh/aX/Uu+0P2R8uL398Qvq333b6BY7IlyV4jz
UkrwR0L4IqBdDP7ygGR/NAurTscqcoloHgEJSMNp8kJU+aG6aYSVzACZlDAE
l4ziUTBL+gUPHJISgYLxD5E75Ku61w2pbI9WtJCHWarArNX+roJ2RsJcUeqB
G3WwW3dEHtkZZbo2eK0Rw+h4nKsDO8Al28Or0D84jxBRER9/ARt3PqT46Y3s
+xcCrqd61rBszoaviTu2nGuqxTRC0Q4A5Oi74Yy9iuxDcMYBdMxuZMSvKqRf
YW66ss4ImLU07AgaZqgA2ysPZb7bF4s3lnaWLfup32X/2Nz9X/pFLWbHa9Tk
NulYUh39+KGFpSlXb55+/P5Jc1fzqx8tr7u/1PW8Lnp5JezV2QPF0TuLY9cJ
CHo86ioOZQ03ai0vegWXtJxDxHAJACU6Ac0kIVlL0TLkvLIMohyTJMMmynJJ
aHY4gk5CJlMVoeKNENnYIGQEhGJEECIyWJsSBjBMSjzKYTsIhI6Z+R4Fp70K
z3gV1PgUX/LPr/HOOeuWXeGadcaFV+7MLfPglHvzT4cxSonc0zxuPoVMu3K5
4vFftxveN3Z1dg1NzAyLZkemZsfnIHsVz0IALwaeOjkxMQnC4gnxxOQUAFjt
zIxEDFnt3Oz8PGAO2hE4J4L2Z88A5wUMikcgxoYBc4O9Pz5+GL/3e+eF8/3p
Ke8jyM0Mv8Yk7w+Jro3JbkC/n9iOj9Ntngnsn9YWfX9fN/Hx4+SnT5L378R/
POi6nDV8u/jl78KBr7cWRkTi3qHZ7i5RR5uk/vVk7dWFy3lT5wQTF2IATRfj
vt/lff/6ZKT3vaT3B0RXh6ThneTOqZkSprgkalRIHsr16s10GxJ4A7qyvTsE
HnWF5JtCQlYpPb0gkVyURykWhpZXYcsq/ctuAKruPT9z50np1bqCizcyrt/g
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
    "], {{0, 240}, {320, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association[
     "AbsoluteTime" -> 3.7135515782191178`17.322364449451527*^9, "Device" -> 
      "USB2.0 PC CAMERA", "GeoLocation" -> {37.730000000000004`, 112.47}]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{320, 240},
  PlotRange->{{0, 320}, {0, 240}}]], "Output",
 CellChangeTimes->{{3.7135224917387495`*^9, 3.713522500796658*^9}, {
   3.7135226942638865`*^9, 3.7135227168731084`*^9}, 3.7135227782220955`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"DeviceClose", "[", "dev", "]"}]], "Input",
 CellChangeTimes->{{3.7135227859468527`*^9, 3.7135227976403775`*^9}}]
},
WindowSize->{759, 601},
WindowMargins->{{Automatic, 67}, {32, Automatic}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (2016\:5e748\:670817\
\:65e5)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 59, 1, 47, "Input"],
Cell[642, 25, 78782, 1599, 353, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79461, 1629, 73, 1, 47, "Input"],
Cell[79537, 1632, 33440, 669, 143, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113014, 2306, 431, 10, 47, "Input"],
Cell[113448, 2318, 17546, 350, 73, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131031, 2673, 139, 2, 30, "Input"],
Cell[131173, 2677, 178, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131388, 2686, 130, 2, 47, "Input"],
Cell[131521, 2690, 243360, 3994, 255, "Output"]
}, Open  ]],
Cell[374896, 6687, 136, 2, 79, "Input"]
}
]
*)

(* End of internal cache information *)

